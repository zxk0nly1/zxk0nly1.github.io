<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python爬虫进阶</title>
    <url>/2019/12/04/python%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="1、非结构化数据的下载"><a href="#1、非结构化数据的下载" class="headerlink" title="1、非结构化数据的下载"></a>1、非结构化数据的下载</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url=<span class="string">"图片链接.jpg"</span></span><br><span class="line">res=requests.get(url,headers)</span><br><span class="line">res.enconding=<span class="string">"utf-8"</span></span><br><span class="line">html=res.content  <span class="comment">#将图片转换为二进制字节流</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"data.jpg"</span>,<span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(html)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> user_headers <span class="keyword">import</span> L</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cunjin</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url=<span class="string">"http://www.gdcjxy.com/index.html"</span></span><br><span class="line">        self.headers=&#123;<span class="string">"User-Agent"</span>:random.choice(L)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(self,url)</span>:</span>  <span class="comment">#获取网页源代码并将源代码转换成xpath的函数</span></span><br><span class="line">        res=requests.get(url,headers=self.headers)</span><br><span class="line">        res.encoding=<span class="string">"utf-8"</span></span><br><span class="line">        html=res.text</span><br><span class="line">        parse_html=etree.HTML(html) <span class="comment">#将源代码转换为xpath对象</span></span><br><span class="line">        <span class="keyword">return</span> parse_html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_t_link</span><span class="params">(self)</span>:</span> <span class="comment">#获取帖子中的站内链接的函数并拼接成完整链接</span></span><br><span class="line">        self.files=<span class="string">"./寸金学院"</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.files): <span class="comment">#检测当前路径是否存在同名文件夹</span></span><br><span class="line">            os.mkdir(self.files)</span><br><span class="line">        parse_html=self.get_html(self.url) <span class="comment">#对官网主页发起请求</span></span><br><span class="line">        t_url=parse_html.xpath(<span class="string">'//a[@class="p"]/@href'</span>)</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> t_url:</span><br><span class="line">            url=<span class="string">"http://www.gdcjxy.com"</span>+link</span><br><span class="line">            self.get_pic_url(url) <span class="comment">#调用获取图片链接的函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_pic_url</span><span class="params">(self,url)</span>:</span> <span class="comment">#获取所有图片链接的函数</span></span><br><span class="line">        parse_html=self.get_html(url)</span><br><span class="line">        pic_url=parse_html.xpath(<span class="string">'//span[@style="font-size:18px;"]/img/@src'</span>)</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> pic_url:</span><br><span class="line">            pic_link=<span class="string">"http://www.gdcjxy.com"</span>+link</span><br><span class="line">            filename=self.files+<span class="string">"//"</span>+pic_link[<span class="number">-15</span>:] <span class="comment">#以图片链接的后15位作为图片的名称</span></span><br><span class="line">            self.save_pic(pic_link,filename) <span class="comment">#调用保存图片的函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_pic</span><span class="params">(self,pic_link,filename)</span>:</span> <span class="comment">#将图片下载到本地的函数</span></span><br><span class="line">        res=requests.get(pic_link,headers=self.headers)</span><br><span class="line">        res.encoding=<span class="string">"utf-8"</span></span><br><span class="line">        html=res.content</span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(html)</span><br><span class="line">            print(filename,<span class="string">"下载成功！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cunjin=Cunjin()</span><br><span class="line">cunjin.get_t_link()</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="2、bs4选择器"><a href="#2、bs4选择器" class="headerlink" title="2、bs4选择器"></a>2、bs4选择器</h1><h2 id="python-m-pip-install-bs4"><a href="#python-m-pip-install-bs4" class="headerlink" title="python -m pip install bs4"></a>python -m pip install bs4</h2><h3 id="from-bs4-import-BeautifulSoup"><a href="#from-bs4-import-BeautifulSoup" class="headerlink" title="from bs4 import BeautifulSoup"></a>from bs4 import BeautifulSoup</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html=<span class="string">""""""</span></span><br><span class="line">soup=BeautifulSoup(html,<span class="string">"lxml"</span>) <span class="comment">#将源代码转换为soup对象</span></span><br></pre></td></tr></table></figure>

<h2 id="1、节点选择器"><a href="#1、节点选择器" class="headerlink" title="1、节点选择器"></a>1、节点选择器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup=BeautifulSoup(html,<span class="string">"lxml"</span>) <span class="comment">#将源代码转换为soup对象</span></span><br><span class="line"><span class="comment"># data=soup.div</span></span><br><span class="line">data=soup.a</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>

<h2 id="2、获取节点属性"><a href="#2、获取节点属性" class="headerlink" title="2、获取节点属性"></a>2、获取节点属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># data=soup.a.attrs["class"]</span></span><br><span class="line">data=soup.a[<span class="string">"class"</span>]</span><br><span class="line">print(data)</span><br><span class="line">data=soup.div.a[<span class="string">"class"</span>] <span class="comment">#嵌套选择</span></span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>

<h2 id="3、方法选择器"><a href="#3、方法选择器" class="headerlink" title="3、方法选择器"></a>3、方法选择器</h2><h3 id="查询所有符合条件的元素，给他传入一些属性或文本，就可以得到所有符合条件的元素"><a href="#查询所有符合条件的元素，给他传入一些属性或文本，就可以得到所有符合条件的元素" class="headerlink" title="查询所有符合条件的元素，给他传入一些属性或文本，就可以得到所有符合条件的元素"></a>查询所有符合条件的元素，给他传入一些属性或文本，就可以得到所有符合条件的元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># data=soup.find_all(name="div")  #查找所有节点名称为div的节点信息</span></span><br><span class="line"><span class="comment"># data=soup.find_all(attrs=&#123;"id":"link"&#125;)</span></span><br><span class="line">data=soup.find_all(id=<span class="string">"link"</span>)</span><br><span class="line">print(data)</span><br><span class="line"><span class="comment"># data=soup.find_all(class_="d1")</span></span><br><span class="line">data=soup.find_all(<span class="string">"div"</span>,class_=<span class="string">"d1"</span>) <span class="comment"># 查找class=d1的div节点信息</span></span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>

<h2 id="4、css选择器"><a href="#4、css选择器" class="headerlink" title="4、css选择器"></a>4、css选择器</h2><h3 id="使用css选择器，调用select方法，可以查找定位符合条件的元素"><a href="#使用css选择器，调用select方法，可以查找定位符合条件的元素" class="headerlink" title="使用css选择器，调用select方法，可以查找定位符合条件的元素"></a>使用css选择器，调用select方法，可以查找定位符合条件的元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#thread_list &gt; li:nth-child(9) &gt; div &gt; div.col2_right.j_threadlist_li_right &gt; div.threadlist_lz.clearfix &gt; div.threadlist_title.pull_left.j_th_tit</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup=BeautifulSoup(html,<span class="string">"lxml"</span>) <span class="comment">#将源代码转换为soup对象</span></span><br><span class="line"><span class="comment"># data=soup.select('div &gt; ul &gt; li') #层级选择</span></span><br><span class="line">data=soup.select(<span class="string">"div.threadlist_title"</span>) <span class="comment">#通过选择器属性定位节点信息</span></span><br><span class="line">print(data)</span><br><span class="line">data=soup.select(<span class="string">'div &gt; ul &gt; li'</span>) <span class="comment">#层级选择</span></span><br><span class="line">print(data)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    print(i.text) <span class="comment">#获取节点中的文本信息</span></span><br><span class="line">    print(i.string)</span><br></pre></td></tr></table></figure>

<h1 id="3、古诗词项目"><a href="#3、古诗词项目" class="headerlink" title="3、古诗词项目"></a>3、古诗词项目</h1><h2 id="www-gushiwen-org"><a href="#www-gushiwen-org" class="headerlink" title="www.gushiwen.org"></a><a href="http://www.gushiwen.org" target="_blank" rel="noopener">www.gushiwen.org</a></h2><h2 id="1、获取所有页面的古诗的标题与内容"><a href="#1、获取所有页面的古诗的标题与内容" class="headerlink" title="1、获取所有页面的古诗的标题与内容"></a>1、获取所有页面的古诗的标题与内容</h2><h2 id="2、存储格式如下："><a href="#2、存储格式如下：" class="headerlink" title="2、存储格式如下："></a>2、存储格式如下：</h2><h3 id="每首古诗单独为一个文件，所有古诗存放在一个文件夹内"><a href="#每首古诗单独为一个文件，所有古诗存放在一个文件夹内" class="headerlink" title="每首古诗单独为一个文件，所有古诗存放在一个文件夹内"></a>每首古诗单独为一个文件，所有古诗存放在一个文件夹内</h3><h3 id="每首古诗文件内的古诗为，标题独自占一行，内容每遇到句号换行一次"><a href="#每首古诗文件内的古诗为，标题独自占一行，内容每遇到句号换行一次" class="headerlink" title="每首古诗文件内的古诗为，标题独自占一行，内容每遇到句号换行一次"></a>每首古诗文件内的古诗为，标题独自占一行，内容每遇到句号换行一次</h3><h3 id="如果古诗标题内存在-，需要去除这个"><a href="#如果古诗标题内存在-，需要去除这个" class="headerlink" title="如果古诗标题内存在/，需要去除这个/"></a>如果古诗标题内存在/，需要去除这个/</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> user_headers <span class="keyword">import</span> L</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gushi</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url=<span class="string">"https://www.gushiwen.org/default_4.aspx"</span></span><br><span class="line">        self.headers=&#123;<span class="string">"User-Agent"</span>:random.choice(L)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_soup</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.files=<span class="string">"./古诗词"</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.files):</span><br><span class="line">            os.mkdir(self.files)</span><br><span class="line">        res=requests.get(self.url,headers=self.headers)</span><br><span class="line">        res.encoding=<span class="string">"utf-8"</span></span><br><span class="line">        html=res.text</span><br><span class="line">        soup=BeautifulSoup(html,<span class="string">"lxml"</span>)</span><br><span class="line">        self.get_data(soup)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(self,soup)</span>:</span></span><br><span class="line">        title=soup.select(<span class="string">'div &gt; p &gt; a &gt; b'</span>) <span class="comment">#通过css选择器查找标题内容</span></span><br><span class="line">        comment=soup.find_all(<span class="string">"div"</span>,class_=<span class="string">"contson"</span>) <span class="comment">#通过方法选择器查找内容信息</span></span><br><span class="line">        self.save_data(title,comment) <span class="comment">#调用保存信息的函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_data</span><span class="params">(self,title,comment)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(title)): <span class="comment">#获取标题和内容列表的索引</span></span><br><span class="line">            name=title[i].text</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> name:</span><br><span class="line">                <span class="keyword">if</span> j==<span class="string">"/"</span>:</span><br><span class="line">                    name=name.replace(j,<span class="string">""</span>)</span><br><span class="line">            filename=self.files+<span class="string">"//"</span>+name</span><br><span class="line">            data=comment[i].text</span><br><span class="line">            <span class="keyword">with</span> open(filename,<span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(name)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">                    f.write(i)</span><br><span class="line">                    <span class="keyword">if</span> i ==<span class="string">"。"</span>: <span class="comment">#如果写入的字符为。,则添加一个换行符进去，进行换行的操作</span></span><br><span class="line">                        f.write(<span class="string">"\n"</span>)</span><br><span class="line">                print(<span class="string">"数据存储成功！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gushi=Gushi()</span><br><span class="line">gushi.get_soup()</span><br></pre></td></tr></table></figure>

<h1 id="4、json模块"><a href="#4、json模块" class="headerlink" title="4、json模块"></a>4、json模块</h1><h2 id="用于python数据类型和json数据类型之间的相互转换"><a href="#用于python数据类型和json数据类型之间的相互转换" class="headerlink" title="用于python数据类型和json数据类型之间的相互转换"></a>用于python数据类型和json数据类型之间的相互转换</h2><h2 id="json-python"><a href="#json-python" class="headerlink" title="json                                python"></a>json                                python</h2><h3 id="对象-字典"><a href="#对象-字典" class="headerlink" title="对象                                       字典"></a>对象                                       字典</h3><h3 id="数组-列表"><a href="#数组-列表" class="headerlink" title="数组                                       列表"></a>数组                                       列表</h3><h2 id="1、json-loads"><a href="#1、json-loads" class="headerlink" title="1、json.loads()"></a>1、json.loads()</h2><h4 id="用于将json—-gt-python数据类型"><a href="#用于将json—-gt-python数据类型" class="headerlink" title="用于将json—&gt;python数据类型"></a>用于将json—&gt;python数据类型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">json_data=<span class="string">"""[&#123;"name":"小明"&#125;,&#123;"age":"20"&#125;,&#123;"sex":"男"&#125;]"""</span></span><br><span class="line">print(json_data)</span><br><span class="line">print(type(json_data))</span><br><span class="line"><span class="comment"># for i in json_data:</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br><span class="line"></span><br><span class="line">data=json.loads(json_data) <span class="comment">#将json--&gt;python</span></span><br><span class="line">print(data)</span><br><span class="line">print(type(data))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<h2 id="2、json-dumps"><a href="#2、json-dumps" class="headerlink" title="2、json.dumps()"></a>2、json.dumps()</h2><h4 id="用于将python—-gt-json数据类型"><a href="#用于将python—-gt-json数据类型" class="headerlink" title="用于将python—&gt;json数据类型"></a>用于将python—&gt;json数据类型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#json.dumps使用的默认编码是ASCII编码，ensure_ascii=False参数的作用就是不适用和这个编码格式</span></span><br><span class="line">json_text=json.dumps(data,indent=<span class="number">2</span>,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"data.json"</span>,<span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json_text)</span><br></pre></td></tr></table></figure>

<h1 id="5、bilibili小视频"><a href="#5、bilibili小视频" class="headerlink" title="5、bilibili小视频"></a>5、bilibili小视频</h1><h2 id="1、抓包-找到存放视频信息的真实请求"><a href="#1、抓包-找到存放视频信息的真实请求" class="headerlink" title="1、抓包 找到存放视频信息的真实请求"></a>1、抓包 找到存放视频信息的真实请求</h2><h2 id="2、分析请求参数，找到可变的参数信息"><a href="#2、分析请求参数，找到可变的参数信息" class="headerlink" title="2、分析请求参数，找到可变的参数信息"></a>2、分析请求参数，找到可变的参数信息</h2><h2 id="3、构造参数字典，然后对url发起请求"><a href="#3、构造参数字典，然后对url发起请求" class="headerlink" title="3、构造参数字典，然后对url发起请求"></a>3、构造参数字典，然后对url发起请求</h2><h2 id="4、发起请求后得到json数据，然后将json数据转换为python数据"><a href="#4、发起请求后得到json数据，然后将json数据转换为python数据" class="headerlink" title="4、发起请求后得到json数据，然后将json数据转换为python数据"></a>4、发起请求后得到json数据，然后将json数据转换为python数据</h2><h2 id="5、解析数据，获取视频的下载地址"><a href="#5、解析数据，获取视频的下载地址" class="headerlink" title="5、解析数据，获取视频的下载地址"></a>5、解析数据，获取视频的下载地址</h2><h2 id="6、将视频下载到本地文件夹"><a href="#6、将视频下载到本地文件夹" class="headerlink" title="6、将视频下载到本地文件夹"></a>6、将视频下载到本地文件夹</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> user_headers <span class="keyword">import</span> L</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bilibili</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url=<span class="string">"https://api.vc.bilibili.com/board/v1/ranking/top?"</span></span><br><span class="line">        self.headers=&#123;<span class="string">"User-Agent"</span>:random.choice(L)&#125;</span><br><span class="line">        self.all_chars=string.whitespace+string.punctuation <span class="comment">#设置一个变量绑定所有的空白字符以及特殊字符</span></span><br><span class="line">        self.files=<span class="string">"./B站视频"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_json</span><span class="params">(self)</span>:</span>  <span class="comment"># 对网页发起请求并获取json信息的函数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.files):</span><br><span class="line">            os.mkdir(self.files)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">82</span>,<span class="number">10</span>):</span><br><span class="line">            params=&#123;</span><br><span class="line">                <span class="string">"page_size"</span>:<span class="string">"10"</span>,</span><br><span class="line">                <span class="string">"next_offset"</span>: str(i),</span><br><span class="line">                <span class="string">"tag"</span>: <span class="string">"小视频"</span>,</span><br><span class="line">                <span class="string">"type"</span>:<span class="string">"tag_general_week"</span>,</span><br><span class="line">                <span class="string">"platform"</span>:<span class="string">"pc"</span></span><br><span class="line">            &#125;</span><br><span class="line">            res=requests.get(self.url,headers=self.headers,params=params)</span><br><span class="line">            res.encoding=<span class="string">"utf-8"</span></span><br><span class="line">            html=res.text</span><br><span class="line">            json_data=json.loads(html)<span class="comment"># 将获取的json数据转换为python数据类型</span></span><br><span class="line">            self.get_video_url(json_data) <span class="comment">#调用获取视频链接的函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_video_url</span><span class="params">(self,json_data)</span>:</span> <span class="comment"># 解析json数据获取视频下载链接的函数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> json_data[<span class="string">"data"</span>][<span class="string">"items"</span>]:</span><br><span class="line">            video_url=i[<span class="string">"item"</span>][<span class="string">"video_playurl"</span>] <span class="comment">#获取视频的地址</span></span><br><span class="line">            name=i[<span class="string">"item"</span>][<span class="string">"description"</span>] <span class="comment">#获取视频的名称</span></span><br><span class="line">            <span class="keyword">if</span> len(name) &gt; <span class="number">15</span>:</span><br><span class="line">                name=name[<span class="number">-15</span>:]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> name:</span><br><span class="line">                <span class="keyword">if</span> j <span class="keyword">in</span> self.all_chars: <span class="comment">#如果标题中存在特殊字符，就替换为空字符</span></span><br><span class="line">                    name=name.replace(j,<span class="string">""</span>)</span><br><span class="line">            filename=self.files+<span class="string">"//"</span>+name+<span class="string">".mp4"</span></span><br><span class="line">            self.save_video(video_url,filename) <span class="comment">#调用保存视频的函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_video</span><span class="params">(self,video_url,filename)</span>:</span> <span class="comment"># 保存视频到本地的函数</span></span><br><span class="line">        res=requests.get(video_url,headers=self.headers)</span><br><span class="line">        res.encoding=<span class="string">"utf-8"</span></span><br><span class="line">        html=res.content</span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(html)</span><br><span class="line">            print(filename,<span class="string">"下载成功！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bili=Bilibili()</span><br><span class="line">bili.get_json()</span><br></pre></td></tr></table></figure>

<h1 id="6、豆瓣电影排行"><a href="#6、豆瓣电影排行" class="headerlink" title="6、豆瓣电影排行"></a>6、豆瓣电影排行</h1><h2 id="1、通过分析查找任意一个类型的电影榜单"><a href="#1、通过分析查找任意一个类型的电影榜单" class="headerlink" title="1、通过分析查找任意一个类型的电影榜单"></a>1、通过分析查找任意一个类型的电影榜单</h2><h2 id="2、找到存放电影信息的请求"><a href="#2、找到存放电影信息的请求" class="headerlink" title="2、找到存放电影信息的请求"></a>2、找到存放电影信息的请求</h2><h2 id="3、获取所有的电影数据"><a href="#3、获取所有的电影数据" class="headerlink" title="3、获取所有的电影数据"></a>3、获取所有的电影数据</h2><h4 id="电影名称-演员信息-国家-上映时间-评分-排名-电影类型"><a href="#电影名称-演员信息-国家-上映时间-评分-排名-电影类型" class="headerlink" title="电影名称  演员信息 国家 上映时间 评分 排名 电影类型"></a>电影名称  演员信息 国家 上映时间 评分 排名 电影类型</h4><h2 id="4、将所有的数据存储到excel表格或者数据库"><a href="#4、将所有的数据存储到excel表格或者数据库" class="headerlink" title="4、将所有的数据存储到excel表格或者数据库"></a>4、将所有的数据存储到excel表格或者数据库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> user_headers <span class="keyword">import</span> L</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Douban</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url=<span class="string">"https://movie.douban.com/j/chart/top_list?"</span></span><br><span class="line">        self.headers=&#123;<span class="string">"User-Agent"</span>:random.choice(L)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_json_data</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"movie.csv"</span>,<span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>,newline=<span class="string">""</span>) <span class="keyword">as</span> f:</span><br><span class="line">            writer=csv.writer(f)</span><br><span class="line">            writer.writerow([<span class="string">"电影名称"</span>,<span class="string">"演员信息"</span>,<span class="string">"国家"</span>,<span class="string">"上映时间"</span>,<span class="string">"评分"</span>,<span class="string">"排名"</span>,<span class="string">"电影类型"</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">81</span>,<span class="number">20</span>):</span><br><span class="line">            params=&#123;</span><br><span class="line">                <span class="string">"type"</span>:<span class="string">"13"</span>,</span><br><span class="line">                <span class="string">"interval_id"</span>:<span class="string">"100:90"</span>,</span><br><span class="line">                <span class="string">"action"</span>:<span class="string">""</span>,</span><br><span class="line">                <span class="string">"start"</span>:str(i),</span><br><span class="line">                <span class="string">"limit"</span>:<span class="string">"20"</span></span><br><span class="line">            &#125;</span><br><span class="line">            res=requests.get(self.url,headers=self.headers,params=params)</span><br><span class="line">            res.encoding=<span class="string">"utf-8"</span></span><br><span class="line">            html=res.text</span><br><span class="line">            json_data=json.loads(html) <span class="comment">#将源代码转换为json数据</span></span><br><span class="line">            self.get_data(json_data) <span class="comment">#调用获取信息的函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(self,json_data)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> json_data:</span><br><span class="line">            title=i[<span class="string">"title"</span>]  <span class="comment">#获取电影名称</span></span><br><span class="line">            actors=i[<span class="string">"actors"</span>] <span class="comment">#获取演员信息   list</span></span><br><span class="line">            actors=<span class="string">","</span>.join(actors)</span><br><span class="line">            regions=i[<span class="string">"regions"</span>] <span class="comment">#获取国家信息  list</span></span><br><span class="line">            regions=<span class="string">","</span>.join(regions)</span><br><span class="line">            release_date=i[<span class="string">"release_date"</span>] <span class="comment">#获取上映时间</span></span><br><span class="line">            score=i[<span class="string">"score"</span>] <span class="comment">#获取评分信息</span></span><br><span class="line">            rank=i[<span class="string">"rank"</span>] <span class="comment">#获取排名信息</span></span><br><span class="line">            types=i[<span class="string">"types"</span>] <span class="comment">#获取类型信息   list</span></span><br><span class="line">            types=<span class="string">","</span>.join(types)</span><br><span class="line">            content=[title,actors,regions,release_date,score,rank,types]</span><br><span class="line">            self.save_data(content) <span class="comment">#调用保存数据的函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_data</span><span class="params">(self,content)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"movie.csv"</span>,<span class="string">"a"</span>,encoding=<span class="string">"utf-8"</span>,newline=<span class="string">""</span>) <span class="keyword">as</span> f:</span><br><span class="line">            writer=csv.writer(f)</span><br><span class="line">            writer.writerow(content)</span><br><span class="line">            print(<span class="string">"数据存储成功！"</span>)</span><br><span class="line"></span><br><span class="line">douban=Douban()</span><br><span class="line">douban.get_json_data()</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python简单爬虫</title>
    <url>/2019/12/03/python%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1 id="1、python爬虫下载器"><a href="#1、python爬虫下载器" class="headerlink" title="1、python爬虫下载器"></a>1、python爬虫下载器</h1><h2 id="1、requests模块"><a href="#1、requests模块" class="headerlink" title="1、requests模块"></a>1、requests模块</h2><h3 id="1、先确定要抓取的网站的地址url"><a href="#1、先确定要抓取的网站的地址url" class="headerlink" title="1、先确定要抓取的网站的地址url"></a>1、先确定要抓取的网站的地址url</h3><h3 id="2、对url发起请求并获取响应-网页的源代码"><a href="#2、对url发起请求并获取响应-网页的源代码" class="headerlink" title="2、对url发起请求并获取响应(网页的源代码)"></a>2、对url发起请求并获取响应(网页的源代码)</h3><h3 id="3、requests-get-方法"><a href="#3、requests-get-方法" class="headerlink" title="3、requests.get()方法"></a>3、requests.get()方法</h3><h4 id="对网页发起请求并获取响应信息"><a href="#对网页发起请求并获取响应信息" class="headerlink" title="对网页发起请求并获取响应信息"></a>对网页发起请求并获取响应信息</h4><h4 id="requests-get-url-headers-params"><a href="#requests-get-url-headers-params" class="headerlink" title="requests.get(url,headers={},params={})"></a>requests.get(url,headers={},params={})</h4><h4 id="url-请求的网页的地址"><a href="#url-请求的网页的地址" class="headerlink" title="url:请求的网页的地址"></a>url:请求的网页的地址</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url=<span class="string">"https://www.baidu.com/"</span>  <span class="comment">#确定抓取网页的url</span></span><br><span class="line">res=requests.get(url)  <span class="comment"># 对网页发起请求并获取响应信息</span></span><br><span class="line">res.encoding=<span class="string">"utf-8"</span></span><br><span class="line">html=res.text <span class="comment">#解析得到的相应内容</span></span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure>

<h4 id="headers-请求携带的浏览器以及操作系统信息"><a href="#headers-请求携带的浏览器以及操作系统信息" class="headerlink" title="headers:请求携带的浏览器以及操作系统信息"></a>headers:请求携带的浏览器以及操作系统信息</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url=<span class="string">"https://www.baidu.com/"</span>  <span class="comment">#确定抓取网页的url</span></span><br><span class="line">headers=&#123;<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36"</span>&#125;</span><br><span class="line">res=requests.get(url,headers=headers)  <span class="comment"># 对网页发起请求并获取响应信息</span></span><br><span class="line">res.encoding=<span class="string">"utf-8"</span></span><br><span class="line">html=res.text <span class="comment">#解析得到的相应内容</span></span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure>

<h4 id="params-请求携带参数的字典"><a href="#params-请求携带参数的字典" class="headerlink" title="params:请求携带参数的字典"></a>params:请求携带参数的字典</h4><h4 id="模拟登陆：登陆账号之后寻找登陆的请求，找到用户的cookie信息，然后让请求携带这个信息去请求网页"><a href="#模拟登陆：登陆账号之后寻找登陆的请求，找到用户的cookie信息，然后让请求携带这个信息去请求网页" class="headerlink" title="模拟登陆：登陆账号之后寻找登陆的请求，找到用户的cookie信息，然后让请求携带这个信息去请求网页"></a>模拟登陆：登陆账号之后寻找登陆的请求，找到用户的cookie信息，然后让请求携带这个信息去请求网页</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">"https://www.baidu.com/s?"</span></span><br><span class="line">headers=&#123;<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50"</span>,</span><br><span class="line">         <span class="string">"Cookie"</span>:<span class="string">"BIDUPSID=20BA20A6474681053EA56436BC4B3D97; PSTM=1574518658; BAIDUID=9276E50B9B762C87B246AFFF86AFE4CB:FG=1; BD_UPN=12314753; ispeed_lsm=2; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; COOKIE_SESSION=25_0_9_6_9_8_0_0_9_5_3_0_0_0_0_0_1575166622_0_1575337152%7C9%230_0_1575337152%7C1; H_PS_645EC=326b1bFfVwAZMn%2BEr2lUzz5jDYz09GAGHFBdUD0mYZboAS5tNtdv1A7yck4; delPer=0; BDUSS=FpvfnhINXpMeldCMU5NRDQ0STdRNi1QS2RLaDFKSTZHcnR2aEJLZmVxZWpUUTFlRUFBQUFBJCQAAAAAAAAAAAEAAAA2JBrPZmx50sHA-9ChuOe45wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKPA5V2jwOVdb; BD_HOME=1; H_PS_PSSID=1438_21105_30210_20698_22159"</span>&#125;</span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">"wd"</span>:<span class="string">"篮球"</span></span><br><span class="line">&#125;</span><br><span class="line">res=requests.get(url,headers=headers,params=params)</span><br><span class="line">res.encoding=<span class="string">"utf-8"</span></span><br><span class="line">html=res.text</span><br><span class="line">print(res.url) <span class="comment">#返回请求的真实url地址</span></span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="2、range-函数"><a href="#2、range-函数" class="headerlink" title="2、range()函数"></a>2、range()函数</h1><h3 id="整数迭代生成器"><a href="#整数迭代生成器" class="headerlink" title="整数迭代生成器"></a>整数迭代生成器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">"https://www.baidu.com/s?"</span></span><br><span class="line">headers=&#123;<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50"</span>,</span><br><span class="line">         <span class="string">"Cookie"</span>:<span class="string">"BIDUPSID=20BA20A6474681053EA56436BC4B3D97; PSTM=1574518658; BAIDUID=9276E50B9B762C87B246AFFF86AFE4CB:FG=1; BD_UPN=12314753; ispeed_lsm=2; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; COOKIE_SESSION=25_0_9_6_9_8_0_0_9_5_3_0_0_0_0_0_1575166622_0_1575337152%7C9%230_0_1575337152%7C1; H_PS_645EC=326b1bFfVwAZMn%2BEr2lUzz5jDYz09GAGHFBdUD0mYZboAS5tNtdv1A7yck4; delPer=0; BDUSS=FpvfnhINXpMeldCMU5NRDQ0STdRNi1QS2RLaDFKSTZHcnR2aEJLZmVxZWpUUTFlRUFBQUFBJCQAAAAAAAAAAAEAAAA2JBrPZmx50sHA-9ChuOe45wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKPA5V2jwOVdb; BD_HOME=1; H_PS_PSSID=1438_21105_30210_20698_22159"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    pn=(page<span class="number">-1</span>)*<span class="number">10</span>  <span class="comment">#构造翻页参数的值</span></span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">"wd"</span>:<span class="string">"篮球"</span>,</span><br><span class="line">        <span class="string">"pn"</span>:str(pn)</span><br><span class="line">    &#125;</span><br><span class="line">    res=requests.get(url,headers=headers,params=params)</span><br><span class="line">    res.encoding=<span class="string">"utf-8"</span></span><br><span class="line">    html=res.text</span><br><span class="line">    print(res.url) <span class="comment">#返回请求的真实url地址</span></span><br><span class="line">    print(html)</span><br></pre></td></tr></table></figure>

<h1 id="3、起点小说"><a href="#3、起点小说" class="headerlink" title="3、起点小说"></a>3、起点小说</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> user_headers <span class="keyword">import</span> L</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">url=<span class="string">"https://www.qidian.com/all?"</span></span><br><span class="line">headers=&#123;<span class="string">"User-Agent"</span>:random.choice(L)&#125;</span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">"page"</span>:str(page)</span><br><span class="line">    &#125;</span><br><span class="line">    res=requests.get(url,headers=headers,params=params)</span><br><span class="line">    res.encoding=<span class="string">"utf-8"</span></span><br><span class="line">    html=res.text</span><br><span class="line">    filenmae=<span class="string">"第"</span>+str(page)+<span class="string">"页.html"</span></span><br><span class="line">    <span class="keyword">with</span> open(filenmae,<span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(html)</span><br><span class="line">        print(filenmae,<span class="string">"下载成功！"</span>)</span><br></pre></td></tr></table></figure>

<h1 id="4、解析模块"><a href="#4、解析模块" class="headerlink" title="4、解析模块"></a>4、解析模块</h1><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h3 id="bs4"><a href="#bs4" class="headerlink" title="bs4"></a>bs4</h3><h3 id="xpath表达式"><a href="#xpath表达式" class="headerlink" title="xpath表达式"></a>xpath表达式</h3><h1 id="5、正则表达式"><a href="#5、正则表达式" class="headerlink" title="5、正则表达式"></a>5、正则表达式</h1><h2 id="import-re-导入正则表达式模块"><a href="#import-re-导入正则表达式模块" class="headerlink" title="import re  导入正则表达式模块"></a>import re  导入正则表达式模块</h2><h2 id="1、re-match-方法"><a href="#1、re-match-方法" class="headerlink" title="1、re.match()方法"></a>1、re.match()方法</h2><h3 id="从字符串的开头进行匹配，返回符合正则表达式的数据"><a href="#从字符串的开头进行匹配，返回符合正则表达式的数据" class="headerlink" title="从字符串的开头进行匹配，返回符合正则表达式的数据"></a>从字符串的开头进行匹配，返回符合正则表达式的数据</h3><h4 id="如果字符串的开头和正则表达式不匹配的话，直接返回None对象"><a href="#如果字符串的开头和正则表达式不匹配的话，直接返回None对象" class="headerlink" title="如果字符串的开头和正则表达式不匹配的话，直接返回None对象"></a>如果字符串的开头和正则表达式不匹配的话，直接返回None对象</h4><table>
<thead>
<tr>
<th>元字符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>\s</td>
<td>匹配一个空白字符</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母数字下划线普通字符</td>
</tr>
<tr>
<td>\W</td>
<td>匹配特殊字符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配一个数字</td>
</tr>
<tr>
<td>.</td>
<td>代表匹配任意字符(\n除外)</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面的表达式多次</td>
</tr>
<tr>
<td>{m}</td>
<td>精确匹配前面的表达式m次</td>
</tr>
<tr>
<td>?</td>
<td>非贪婪匹配</td>
</tr>
<tr>
<td>()</td>
<td>分组(想要什么数据就给什么数据加括号)</td>
</tr>
<tr>
<td>*</td>
<td>匹配出现1次或任意次的字符</td>
</tr>
<tr>
<td>^</td>
<td>从头开始匹配</td>
</tr>
<tr>
<td>$</td>
<td>匹配到末尾结束</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s=<span class="string">"hello world 1234 5678 你好"</span></span><br><span class="line"><span class="comment"># result=re.match('^h\w\w\w\w\s\w&#123;5&#125;',s)</span></span><br><span class="line"><span class="comment"># result=re.match('^h(\w&#123;4&#125;\s\w&#123;5&#125;)\s(\d&#123;4&#125;\s\d&#123;4&#125;)',s)</span></span><br><span class="line">result=re.search(<span class="string">'^h.*'</span>,s)</span><br><span class="line">print(result.group())</span><br></pre></td></tr></table></figure>

<h2 id="2、贪婪匹配与非贪婪匹配"><a href="#2、贪婪匹配与非贪婪匹配" class="headerlink" title="2、贪婪匹配与非贪婪匹配"></a>2、贪婪匹配与非贪婪匹配</h2><h3 id="贪婪匹配-在正则表达式匹配成功的前提下，尽可能多的匹配数据"><a href="#贪婪匹配-在正则表达式匹配成功的前提下，尽可能多的匹配数据" class="headerlink" title="贪婪匹配:在正则表达式匹配成功的前提下，尽可能多的匹配数据(.*)"></a>贪婪匹配:在正则表达式匹配成功的前提下，尽可能多的匹配数据(.*)</h3><h3 id="非贪婪匹配-在正则表达式匹配成功的前提下，尽可能少的匹配数据"><a href="#非贪婪匹配-在正则表达式匹配成功的前提下，尽可能少的匹配数据" class="headerlink" title="非贪婪匹配:在正则表达式匹配成功的前提下，尽可能少的匹配数据(.*?)"></a>非贪婪匹配:在正则表达式匹配成功的前提下，尽可能少的匹配数据(.*?)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s=<span class="string">"hello world 12345678 你好"</span></span><br><span class="line"><span class="comment"># result=re.match('^h\w\w\w\w\s\w&#123;5&#125;',s)</span></span><br><span class="line"><span class="comment"># result=re.match('^h(\w&#123;4&#125;\s\w&#123;5&#125;)\s(\d&#123;4&#125;\s\d&#123;4&#125;)',s)</span></span><br><span class="line"><span class="comment"># result=re.search('^h.*',s)</span></span><br><span class="line">result=re.match(<span class="string">'^h(.*?)(\d+)'</span>,s)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.group(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h2 id="3、search-方法"><a href="#3、search-方法" class="headerlink" title="3、search()方法"></a>3、search()方法</h2><h3 id="扫描整个字符串，返回第一个符合正则表达式的数据"><a href="#扫描整个字符串，返回第一个符合正则表达式的数据" class="headerlink" title="扫描整个字符串，返回第一个符合正则表达式的数据"></a>扫描整个字符串，返回第一个符合正则表达式的数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result=re.search(<span class="string">'\w\s'</span>,s)</span><br><span class="line">print(result.group())</span><br></pre></td></tr></table></figure>

<h4 id="如果字符串中有多个区间满足正则表达式，也只能返回第一个满足的数据"><a href="#如果字符串中有多个区间满足正则表达式，也只能返回第一个满足的数据" class="headerlink" title="如果字符串中有多个区间满足正则表达式，也只能返回第一个满足的数据"></a>如果字符串中有多个区间满足正则表达式，也只能返回第一个满足的数据</h4><h2 id="4、findall-方法"><a href="#4、findall-方法" class="headerlink" title="4、findall()方法"></a>4、findall()方法</h2><h3 id="扫描整个字符串，返回所有满足正则表达式的数据列表"><a href="#扫描整个字符串，返回所有满足正则表达式的数据列表" class="headerlink" title="扫描整个字符串，返回所有满足正则表达式的数据列表"></a>扫描整个字符串，返回所有满足正则表达式的数据列表</h3><h3 id="findall里没有group-方法"><a href="#findall里没有group-方法" class="headerlink" title="findall里没有group()方法"></a>findall里没有group()方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result=re.findall(<span class="string">'\w\s'</span>,s)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<h2 id="5、标志位"><a href="#5、标志位" class="headerlink" title="5、标志位"></a>5、标志位</h2><h3 id="正则表达式可以通过一些标志位来满足一些特殊的需求"><a href="#正则表达式可以通过一些标志位来满足一些特殊的需求" class="headerlink" title="正则表达式可以通过一些标志位来满足一些特殊的需求"></a>正则表达式可以通过一些标志位来满足一些特殊的需求</h3><h4 id="re-S-代表可以进行多行匹配"><a href="#re-S-代表可以进行多行匹配" class="headerlink" title="re.S 代表可以进行多行匹配"></a>re.S 代表可以进行多行匹配</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result=re.findall(<span class="string">'.*'</span>,s,re.S)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<h2 id="6、re-compile"><a href="#6、re-compile" class="headerlink" title="6、re.compile()"></a>6、re.compile()</h2><h3 id="将字符串编译为一个正则表达式对象"><a href="#将字符串编译为一个正则表达式对象" class="headerlink" title="将字符串编译为一个正则表达式对象"></a>将字符串编译为一个正则表达式对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p=re.compile(<span class="string">'.*'</span>,re.S)</span><br><span class="line">result=re.findall(p,s)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<h1 id="6、起点小说解析"><a href="#6、起点小说解析" class="headerlink" title="6、起点小说解析"></a>6、起点小说解析</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html=<span class="string">"""</span></span><br><span class="line"><span class="string">&lt;div class="book-mid-info"&gt;</span></span><br><span class="line"><span class="string">                    &lt;h4&gt;&lt;a href="//book.qidian.com/info/1004608738" target="_blank" data-eid="qd_B58" data-bid="1004608738"&gt;圣墟&lt;/a&gt;&lt;/h4&gt;</span></span><br><span class="line"><span class="string">                    &lt;p class="author"&gt;</span></span><br><span class="line"><span class="string">                        &lt;img src="//qidian.gtimg.com/qd/images/ico/user.f22d3.png"&gt;&lt;a class="name" href="//my.qidian.com/author/4362453" data-eid="qd_B59" target="_blank"&gt;辰东&lt;/a&gt;&lt;em&gt;|&lt;/em&gt;&lt;a href="//www.qidian.com/xuanhuan" target="_blank" data-eid="qd_B60"&gt;玄幻&lt;/a&gt;&lt;i&gt;·&lt;/i&gt;&lt;a class="go-sub-type" data-typeid="21" data-subtypeid="8" href="javascript:" data-eid="qd_B61"&gt;东方玄幻&lt;/a&gt;&lt;em&gt;|&lt;/em&gt;&lt;span&gt;连载&lt;/span&gt;</span></span><br><span class="line"><span class="string">                        </span></span><br><span class="line"><span class="string">                    &lt;/p&gt;</span></span><br><span class="line"><span class="string">                    &lt;p class="intro"&gt;</span></span><br><span class="line"><span class="string">                        在破败中崛起，在寂灭中复苏。沧海成尘，雷电枯竭，那一缕幽雾又一次临近大地，世间的枷锁被打开了，一个全新的世界就此揭开神秘的一角……</span></span><br><span class="line"><span class="string">                    &lt;/p&gt;</span></span><br><span class="line"><span class="string">                    &lt;p class="update"&gt;&lt;span&gt;&lt;style&gt;@font-face &#123; font-family: CjUTgyWy; src: url('https://qidian.gtimg.com/qd_anti_spider/CjUTgyWy.eot?') format('eot'); src: url('https://qidian.gtimg.com/qd_anti_spider/CjUTgyWy.woff') format('woff'), url('https://qidian.gtimg.com/qd_anti_spider/CjUTgyWy.ttf') format('truetype'); &#125; .CjUTgyWy &#123; font-family: 'CjUTgyWy' !important;     display: initial !important; color: inherit !important; vertical-align: initial !important; &#125;&lt;/style&gt;&lt;span class="CjUTgyWy"&gt;&lt;/span&gt;万字&lt;/span&gt;</span></span><br><span class="line"><span class="string">                        </span></span><br><span class="line"><span class="string">                    &lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">p=re.compile(<span class="string">'&lt;div class="book-mid-info"&gt;.*?data-bid.*?&gt;(.*?)&lt;/a&gt;.*?class="intro"&gt;(.*?)&lt;/p&gt;'</span>,re.S)</span><br><span class="line">data=re.findall(p,html)</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>

<h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> user_headers <span class="keyword">import</span> L</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Qidian</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">"https://www.qidian.com/all?"</span></span><br><span class="line">        self.headers = &#123;<span class="string">"User-Agent"</span>: random.choice(L)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change_page</span><span class="params">(self)</span>:</span>  <span class="comment"># 进行翻页的函数</span></span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">            params=&#123;</span><br><span class="line">                <span class="string">"page"</span>:str(page)</span><br><span class="line">            &#125;</span><br><span class="line">            self.get_html(params)  <span class="comment"># 调用获取网页源代码的函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(self,params)</span>:</span>  <span class="comment"># 获取网页源代码的函数</span></span><br><span class="line">        res=requests.get(self.url,headers=self.headers,params=params)</span><br><span class="line">        res.encoding=<span class="string">"utf-8"</span></span><br><span class="line">        html=res.text</span><br><span class="line">        self.get_data(html)  <span class="comment"># 调用解析数据的函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(self,html)</span>:</span>  <span class="comment"># 解析网页数据的函数</span></span><br><span class="line">        p = re.compile(<span class="string">'&lt;div class="book-mid-info"&gt;.*?data-bid.*?&gt;(.*?)&lt;/a&gt;.*?class="intro"&gt;(.*?)&lt;/p&gt;'</span>, re.S)</span><br><span class="line">        data = re.findall(p, html)</span><br><span class="line">        print(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_data</span><span class="params">(self)</span>:</span>  <span class="comment"># 保存数据的函数</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">qidian=Qidian()</span><br><span class="line">qidian.change_page()</span><br></pre></td></tr></table></figure>

<h1 id="7、csv文件的操作"><a href="#7、csv文件的操作" class="headerlink" title="7、csv文件的操作"></a>7、csv文件的操作</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">L=[<span class="string">"小明"</span>,<span class="string">"20"</span>,<span class="string">"男"</span>]</span><br><span class="line">L1=[<span class="string">"小红"</span>,<span class="string">"25"</span>,<span class="string">"女"</span>]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"data.csv"</span>,<span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>,newline=<span class="string">""</span>) <span class="keyword">as</span> f: <span class="comment">#newline参数是为了防止出现空行</span></span><br><span class="line">    writer=csv.writer(f)  <span class="comment">#创建写入对象</span></span><br><span class="line">    writer.writerow(L)</span><br><span class="line">    writer.writerow(L1)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> user_headers <span class="keyword">import</span> L</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Qidian</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">"https://www.qidian.com/all?"</span></span><br><span class="line">        self.headers = &#123;<span class="string">"User-Agent"</span>: random.choice(L)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change_page</span><span class="params">(self)</span>:</span>  <span class="comment"># 进行翻页的函数</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"xiaoshuo.csv"</span>, <span class="string">"a"</span>, encoding=<span class="string">"utf-8"</span>, newline=<span class="string">""</span>) <span class="keyword">as</span> f:</span><br><span class="line">            writer = csv.writer(f)</span><br><span class="line">            writer.writerow([<span class="string">"小说名称"</span>,<span class="string">"小说简介"</span>])</span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">            params=&#123;</span><br><span class="line">                <span class="string">"page"</span>:str(page)</span><br><span class="line">            &#125;</span><br><span class="line">            self.get_html(params)  <span class="comment"># 调用获取网页源代码的函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(self,params)</span>:</span>  <span class="comment"># 获取网页源代码的函数</span></span><br><span class="line">        res=requests.get(self.url,headers=self.headers,params=params)</span><br><span class="line">        res.encoding=<span class="string">"utf-8"</span></span><br><span class="line">        html=res.text</span><br><span class="line">        self.get_data(html)  <span class="comment"># 调用解析数据的函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(self,html)</span>:</span>  <span class="comment"># 解析网页数据的函数</span></span><br><span class="line">        p = re.compile(<span class="string">'&lt;div class="book-mid-info"&gt;.*?data-bid.*?&gt;(.*?)&lt;/a&gt;.*?class="intro"&gt;(.*?)&lt;/p&gt;'</span>, re.S)</span><br><span class="line">        data = re.findall(p, html)</span><br><span class="line">        self.save_data(data) <span class="comment">#调用保存数据的函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_data</span><span class="params">(self,data)</span>:</span>  <span class="comment"># 保存数据的函数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">            title=i[<span class="number">0</span>]  <span class="comment">#获取小说的名称</span></span><br><span class="line">            text=i[<span class="number">1</span>].strip()  <span class="comment">#获取小说的简介 strip()代表去掉字符串两边的空白字符以及换行符</span></span><br><span class="line">            content=[title,text] <span class="comment">#创建写入csv文件的数据列表</span></span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"xiaoshuo.csv"</span>,<span class="string">"a"</span>,encoding=<span class="string">"utf-8"</span>,newline=<span class="string">""</span>) <span class="keyword">as</span> f:</span><br><span class="line">                writer=csv.writer(f)</span><br><span class="line">                writer.writerow(content)</span><br><span class="line">                print(<span class="string">"数据写入成功！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">qidian=Qidian()</span><br><span class="line">qidian.change_page()</span><br></pre></td></tr></table></figure>

<h1 id="8、猫眼电影"><a href="#8、猫眼电影" class="headerlink" title="8、猫眼电影"></a>8、猫眼电影</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html=<span class="string">"""</span></span><br><span class="line"><span class="string">&lt;div class="movie-item-info"&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="name"&gt;&lt;a href="/films/1203" title="霸王别姬" data-act="boarditem-click" data-val="&#123;movieId:1203&#125;"&gt;霸王别姬&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="star"&gt;</span></span><br><span class="line"><span class="string">                主演：张国荣,张丰毅,巩俐</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="releasetime"&gt;上映时间：1993-07-26&lt;/p&gt;    &lt;/div&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">p=re.compile(<span class="string">'&lt;div class="movie-item-info"&gt;.*?title="(.*?)".*?class="star"&gt;(.*?)&lt;/p&gt;.*?class="releasetime"&gt;(.*?)&lt;/p&gt;'</span>,re.S)</span><br><span class="line">data=re.findall(p,html)</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>

<h1 id="9、xpath解析器"><a href="#9、xpath解析器" class="headerlink" title="9、xpath解析器"></a>9、xpath解析器</h1><h2 id="from-lxml-import-etree"><a href="#from-lxml-import-etree" class="headerlink" title="from lxml import etree"></a>from lxml import etree</h2><h2 id="from-lxml-import-html"><a href="#from-lxml-import-html" class="headerlink" title="from lxml import html"></a>from lxml import html</h2><h3 id="xpath解析器是在xml文档中寻找数据的一种工具"><a href="#xpath解析器是在xml文档中寻找数据的一种工具" class="headerlink" title="xpath解析器是在xml文档中寻找数据的一种工具"></a>xpath解析器是在xml文档中寻找数据的一种工具</h3><table>
<thead>
<tr>
<th>元字符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td>获取当前节点</td>
</tr>
<tr>
<td>//</td>
<td>获取当前节点的子孙节点</td>
</tr>
<tr>
<td>@</td>
<td>获取节点的属性</td>
</tr>
<tr>
<td>text()</td>
<td>获取节点的文本信息</td>
</tr>
<tr>
<td>../</td>
<td>获取当前节点的父节点</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html=<span class="string">"""</span></span><br><span class="line"><span class="string">&lt;div class="movie-item-info"&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="name"&gt;&lt;a href="/films/13824" title="射雕英雄传之东成西就" data-act="boarditem-click" data-val="&#123;movieId:13824&#125;"&gt;射雕英雄传之东成西就&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="star"&gt;</span></span><br><span class="line"><span class="string">                主演：张国荣,梁朝伟,张学友&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="releasetime"&gt;上映时间：1993-02-05(中国香港)&lt;/p&gt;    </span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class="d1"&gt;</span></span><br><span class="line"><span class="string">        &lt;li id="link1"&gt;百度&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li id="link2"&gt;新浪&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li id="link3"&gt;网易&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;hello world&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;你好世界！&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">parse_html=etree.HTML(html) <span class="comment">#将网页源代码转换成xpath对象</span></span><br><span class="line"><span class="comment">#获取class=movie-item-info的div节点下的class=name的p节点下的a节点的title属性</span></span><br><span class="line">data=parse_html.xpath(<span class="string">'//div[@class="movie-item-info"]/p[@class="name"]/a/@title'</span>)</span><br><span class="line"><span class="comment"># data=parse_html.xpath('//div') #获取所有的div节点</span></span><br><span class="line"><span class="comment"># data=parse_html.xpath('//p')</span></span><br><span class="line"><span class="comment"># data=parse_html.xpath('//div/p') #获取div节点下的p节点的信息</span></span><br><span class="line"><span class="comment"># data=parse_html.xpath('//div[@class="d1"]/p') #获取class=d1的div节点下p节点的信息</span></span><br><span class="line"><span class="comment"># data=parse_html.xpath('//div[@class="d1"]/p/text()') #获取class=d1的div节点下的p节点中的文本信息</span></span><br><span class="line"><span class="comment"># data=parse_html.xpath('//div[@class="d1"]/p[1]/text()') #获取class=d1的div节点下的第一个p节点中的文本信息</span></span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>

<h1 id="10、学院官网"><a href="#10、学院官网" class="headerlink" title="10、学院官网"></a>10、学院官网</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> user_headers <span class="keyword">import</span> L</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cunjin</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url=<span class="string">"http://www.gdcjxy.com/index.html"</span></span><br><span class="line">        self.headers=&#123;<span class="string">"User-Agent"</span>:random.choice(L)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(self,url)</span>:</span>  <span class="comment">#获取网页源代码并将源代码转换成xpath的函数</span></span><br><span class="line">        res=requests.get(url,headers=self.headers)</span><br><span class="line">        res.encoding=<span class="string">"utf-8"</span></span><br><span class="line">        html=res.text</span><br><span class="line">        parse_html=etree.HTML(html) <span class="comment">#将源代码转换为xpath对象</span></span><br><span class="line">        <span class="keyword">return</span> parse_html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_t_link</span><span class="params">(self)</span>:</span> <span class="comment">#获取帖子中的站内链接的函数并拼接成完整链接</span></span><br><span class="line">        parse_html=self.get_html(self.url) <span class="comment">#对官网主页发起请求</span></span><br><span class="line">        t_url=parse_html.xpath(<span class="string">'//a[@class="p"]/@href'</span>)</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> t_url:</span><br><span class="line">            url=<span class="string">"http://www.gdcjxy.com"</span>+link</span><br><span class="line">            self.get_pic_url(url) <span class="comment">#调用获取图片链接的函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_pic_url</span><span class="params">(self,url)</span>:</span> <span class="comment">#获取所有图片链接的函数</span></span><br><span class="line">        parse_html=self.get_html(url)</span><br><span class="line">        pic_url=parse_html.xpath(<span class="string">'//span[@style="font-size:18px;"]/img/@src'</span>)</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> pic_url:</span><br><span class="line">            pic_link=<span class="string">"http://www.gdcjxy.com"</span>+link</span><br><span class="line">            print(pic_link)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_pic</span><span class="params">(self)</span>:</span> <span class="comment">#将图片下载到本地的函数</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">cunjin=Cunjin()</span><br><span class="line">cunjin.get_t_link()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pyhton</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础</title>
    <url>/2019/12/02/python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="1、python基础"><a href="#1、python基础" class="headerlink" title="1、python基础"></a>1、python基础</h1><h2 id="1、python中的变量"><a href="#1、python中的变量" class="headerlink" title="1、python中的变量"></a>1、python中的变量</h2><h2 id="2、python中的数据类型"><a href="#2、python中的数据类型" class="headerlink" title="2、python中的数据类型"></a>2、python中的数据类型</h2><h3 id="整型-浮点型-复数-布尔类型"><a href="#整型-浮点型-复数-布尔类型" class="headerlink" title="整型 浮点型 复数 布尔类型"></a>整型 浮点型 复数 布尔类型</h3><h3 id="复数分为实部和虚部"><a href="#复数分为实部和虚部" class="headerlink" title="复数分为实部和虚部"></a>复数分为实部和虚部</h3><h2 id="3、python中的算术运算符"><a href="#3、python中的算术运算符" class="headerlink" title="3、python中的算术运算符"></a>3、python中的算术运算符</h2><h2 id><a href="#" class="headerlink" title="+"></a>+</h2><p>*<br>/<br>// 地板除(取整运算)<br>% 取余运算<br>** 幂运算</p>
<h2 id="4、if条件判断语句"><a href="#4、if条件判断语句" class="headerlink" title="4、if条件判断语句"></a>4、if条件判断语句</h2><h3 id="让程序根据条件选择性的执行某条或者某些语句"><a href="#让程序根据条件选择性的执行某条或者某些语句" class="headerlink" title="让程序根据条件选择性的执行某条或者某些语句"></a>让程序根据条件选择性的执行某条或者某些语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件表达式<span class="number">1</span>:</span><br><span class="line">  语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 条件表达式<span class="number">2</span>:</span><br><span class="line">  语句块<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  语句块<span class="number">3</span></span><br></pre></td></tr></table></figure>
<h3 id="if与elif语句的区别"><a href="#if与elif语句的区别" class="headerlink" title="if与elif语句的区别"></a>if与elif语句的区别</h3><h3 id="当程序中需要使用多条语句进行判断的时候，如果判断语句全部为if语句，那当第一条if语句满足条件后，程序不会结束，而会继续向下判断所有的if语句中的真值表达式，执行所有满足表达式的语句。如果使用if语句和elif语句，当第一条if语句或者任意一个elif语句满足条件后，程序不会再向下继续判断，直接结束程序的执行"><a href="#当程序中需要使用多条语句进行判断的时候，如果判断语句全部为if语句，那当第一条if语句满足条件后，程序不会结束，而会继续向下判断所有的if语句中的真值表达式，执行所有满足表达式的语句。如果使用if语句和elif语句，当第一条if语句或者任意一个elif语句满足条件后，程序不会再向下继续判断，直接结束程序的执行" class="headerlink" title="当程序中需要使用多条语句进行判断的时候，如果判断语句全部为if语句，那当第一条if语句满足条件后，程序不会结束，而会继续向下判断所有的if语句中的真值表达式，执行所有满足表达式的语句。如果使用if语句和elif语句，当第一条if语句或者任意一个elif语句满足条件后，程序不会再向下继续判断，直接结束程序的执行"></a>当程序中需要使用多条语句进行判断的时候，如果判断语句全部为if语句，那当第一条if语句满足条件后，程序不会结束，而会继续向下判断所有的if语句中的真值表达式，执行所有满足表达式的语句。如果使用if语句和elif语句，当第一条if语句或者任意一个elif语句满足条件后，程序不会再向下继续判断，直接结束程序的执行</h3><h3 id="5、if语句的嵌套"><a href="#5、if语句的嵌套" class="headerlink" title="5、if语句的嵌套"></a>5、if语句的嵌套</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=int(input(<span class="string">"请输入一个月份："</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span>&lt;=n&lt;=<span class="number">12</span>:</span><br><span class="line">  <span class="keyword">if</span> n&lt;=<span class="number">3</span>:</span><br><span class="line">    print(<span class="string">"春季！"</span>)</span><br><span class="line">  <span class="keyword">elif</span> n&lt;=<span class="number">6</span>:</span><br><span class="line">    print(<span class="string">"夏季！"</span>)</span><br><span class="line">  <span class="keyword">elif</span> n&lt;=<span class="number">9</span>:</span><br><span class="line">    print(<span class="string">"秋季！"</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"冬季！"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">"您输入的月份有误！"</span>)</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="6、字符串-str"><a href="#6、字符串-str" class="headerlink" title="6、字符串 str"></a>6、字符串 str</h3><h3 id="在python中用引号引起来的部分都称为字符串"><a href="#在python中用引号引起来的部分都称为字符串" class="headerlink" title="在python中用引号引起来的部分都称为字符串"></a>在python中用引号引起来的部分都称为字符串</h3><h3 id="‘’"><a href="#‘’" class="headerlink" title="‘’"></a>‘’</h3><h3 id="“”"><a href="#“”" class="headerlink" title="“”"></a>“”</h3><h3 id="‘’’’’’"><a href="#‘’’’’’" class="headerlink" title="‘’’’’’"></a>‘’’’’’</h3><h3 id="“”””””"><a href="#“”””””" class="headerlink" title="“”””””"></a>“”””””</h3><h3 id="引号的区别"><a href="#引号的区别" class="headerlink" title="引号的区别:"></a>引号的区别:</h3><h3 id="1、单引号内的双引号不算做结束符"><a href="#1、单引号内的双引号不算做结束符" class="headerlink" title="1、单引号内的双引号不算做结束符"></a>1、单引号内的双引号不算做结束符</h3><h3 id="2、双引号内的单引号不算做结束符"><a href="#2、双引号内的单引号不算做结束符" class="headerlink" title="2、双引号内的单引号不算做结束符"></a>2、双引号内的单引号不算做结束符</h3><h3 id="3、三引号一般用于表示函数或者类的文档字符串"><a href="#3、三引号一般用于表示函数或者类的文档字符串" class="headerlink" title="3、三引号一般用于表示函数或者类的文档字符串"></a>3、三引号一般用于表示函数或者类的文档字符串</h3><h3 id="4、三引号内可以包含单引号和双引号，三引号内的换行符会自动转换为-n"><a href="#4、三引号内可以包含单引号和双引号，三引号内的换行符会自动转换为-n" class="headerlink" title="4、三引号内可以包含单引号和双引号，三引号内的换行符会自动转换为\n"></a>4、三引号内可以包含单引号和双引号，三引号内的换行符会自动转换为\n</h3><h3 id="7、字符串的运算-不可变序列"><a href="#7、字符串的运算-不可变序列" class="headerlink" title="7、字符串的运算(不可变序列)"></a>7、字符串的运算(不可变序列)</h3><h3 id="用于拼接字符串"><a href="#用于拼接字符串" class="headerlink" title="+ 用于拼接字符串"></a>+ 用于拼接字符串</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=int(input(<span class="string">"请输入一个月份："</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span>&lt;=n&lt;=<span class="number">12</span>:</span><br><span class="line">  <span class="keyword">if</span> n&lt;=<span class="number">3</span>:</span><br><span class="line">    print(<span class="string">"春季！"</span>)</span><br><span class="line">  <span class="keyword">elif</span> n&lt;=<span class="number">6</span>:</span><br><span class="line">    print(<span class="string">"夏季！"</span>)</span><br><span class="line">  <span class="keyword">elif</span> n&lt;=<span class="number">9</span>:</span><br><span class="line">    print(<span class="string">"秋季！"</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"冬季！"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">"您输入的月份有误！"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="用于原字符串与运算符右侧的字符串进行拼接"><a href="#用于原字符串与运算符右侧的字符串进行拼接" class="headerlink" title="+= 用于原字符串与运算符右侧的字符串进行拼接"></a>+= 用于原字符串与运算符右侧的字符串进行拼接</h3><h3 id="生成重复的字符串-只能和正整型数进行运算"><a href="#生成重复的字符串-只能和正整型数进行运算" class="headerlink" title="* 生成重复的字符串(只能和正整型数进行运算)"></a>* 生成重复的字符串(只能和正整型数进行运算)</h3><h3 id="生成重复的字符串"><a href="#生成重复的字符串" class="headerlink" title="*= 生成重复的字符串"></a>*= 生成重复的字符串</h3><h3 id="8、字符串的索引与切片"><a href="#8、字符串的索引与切片" class="headerlink" title="8、字符串的索引与切片"></a>8、字符串的索引与切片</h3><h3 id="索引-index"><a href="#索引-index" class="headerlink" title="索引 index"></a>索引 index</h3><h3 id="从字符串中获取任意一个字符"><a href="#从字符串中获取任意一个字符" class="headerlink" title="从字符串中获取任意一个字符"></a>从字符串中获取任意一个字符</h3><h3 id="索引分为正向索引和反向索引"><a href="#索引分为正向索引和反向索引" class="headerlink" title="索引分为正向索引和反向索引"></a>索引分为正向索引和反向索引</h3><h3 id="正向索引从0开始，第一个元素的索引为0，第二个元素索引为1，以此类推，最后一个元素的"><a href="#正向索引从0开始，第一个元素的索引为0，第二个元素索引为1，以此类推，最后一个元素的" class="headerlink" title="正向索引从0开始，第一个元素的索引为0，第二个元素索引为1，以此类推，最后一个元素的"></a>正向索引从0开始，第一个元素的索引为0，第二个元素索引为1，以此类推，最后一个元素的</h3><h3 id="索引为字符串的长度-1"><a href="#索引为字符串的长度-1" class="headerlink" title="索引为字符串的长度-1"></a>索引为字符串的长度-1</h3><h3 id="反向索引从-1开始，最后一个元素的索引为-1，倒数第二个元素的索引为-2，以此类推，第一"><a href="#反向索引从-1开始，最后一个元素的索引为-1，倒数第二个元素的索引为-2，以此类推，第一" class="headerlink" title="反向索引从-1开始，最后一个元素的索引为-1，倒数第二个元素的索引为-2，以此类推，第一"></a>反向索引从-1开始，最后一个元素的索引为-1，倒数第二个元素的索引为-2，以此类推，第一</h3><h3 id="个元素的索引为字符串长度的相反数"><a href="#个元素的索引为字符串长度的相反数" class="headerlink" title="个元素的索引为字符串长度的相反数"></a>个元素的索引为字符串长度的相反数</h3><h3 id="s-”A-B-C-D-E-F”"><a href="#s-”A-B-C-D-E-F”" class="headerlink" title="s=”A B C D E F”"></a>s=”A B C D E F”</h3><h3 id="正向索引-0-1-2-3-4-5"><a href="#正向索引-0-1-2-3-4-5" class="headerlink" title="正向索引 0 1 2 3 4 5"></a>正向索引 0 1 2 3 4 5</h3><h3 id="反向索引-6-5-4-3-2-1"><a href="#反向索引-6-5-4-3-2-1" class="headerlink" title="反向索引 -6 -5 -4 -3 -2 -1"></a>反向索引 -6 -5 -4 -3 -2 -1</h3><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则:"></a>语法规则:</h3><h3 id="字符串-整数表达式"><a href="#字符串-整数表达式" class="headerlink" title="字符串[整数表达式]"></a>字符串[整数表达式]</h3><h3 id="切片-slice"><a href="#切片-slice" class="headerlink" title="切片 slice"></a>切片 slice</h3><h3 id="从字符串中获取连续或者带有一定间隔的字符"><a href="#从字符串中获取连续或者带有一定间隔的字符" class="headerlink" title="从字符串中获取连续或者带有一定间隔的字符"></a>从字符串中获取连续或者带有一定间隔的字符</h3><h3 id="语法规则-1"><a href="#语法规则-1" class="headerlink" title="语法规则:"></a>语法规则:</h3><h3 id="字符串-起始索引-终止索引-步长"><a href="#字符串-起始索引-终止索引-步长" class="headerlink" title="字符串[起始索引:终止索引:步长]"></a>字符串[起始索引:终止索引:步长]</h3><h3 id="起始索引-切片切下的位置"><a href="#起始索引-切片切下的位置" class="headerlink" title="起始索引:切片切下的位置"></a>起始索引:切片切下的位置</h3><h3 id="终止索引-切片的终止点，但是不包含终止点"><a href="#终止索引-切片的终止点，但是不包含终止点" class="headerlink" title="终止索引:切片的终止点，但是不包含终止点"></a>终止索引:切片的终止点，但是不包含终止点</h3><h3 id="步长：切片每次获取完元素后，移动的方向和偏移量-没有步长相当于步长为1"><a href="#步长：切片每次获取完元素后，移动的方向和偏移量-没有步长相当于步长为1" class="headerlink" title="步长：切片每次获取完元素后，移动的方向和偏移量(没有步长相当于步长为1)"></a>步长：切片每次获取完元素后，移动的方向和偏移量(没有步长相当于步长为1)</h3><h3 id="当步长为正数时，取正向切片"><a href="#当步长为正数时，取正向切片" class="headerlink" title="当步长为正数时，取正向切片"></a>当步长为正数时，取正向切片</h3><h3 id="当步长为负数时，取反向切片"><a href="#当步长为负数时，取反向切片" class="headerlink" title="当步长为负数时，取反向切片"></a>当步长为负数时，取反向切片</h3><h3 id="当切片带有步长时，切片获取完第一个元素后，用第一个元素的索引加上步长得到一个新的"><a href="#当切片带有步长时，切片获取完第一个元素后，用第一个元素的索引加上步长得到一个新的" class="headerlink" title="当切片带有步长时，切片获取完第一个元素后，用第一个元素的索引加上步长得到一个新的"></a>当切片带有步长时，切片获取完第一个元素后，用第一个元素的索引加上步长得到一个新的</h3><h3 id="索引，然后获取这个新索引所对应的元素，以此类推"><a href="#索引，然后获取这个新索引所对应的元素，以此类推" class="headerlink" title="索引，然后获取这个新索引所对应的元素，以此类推"></a>索引，然后获取这个新索引所对应的元素，以此类推</h3><h3 id="当步长为负数时，起始索引所对应的元素必须在终止索引所对应元素的右边"><a href="#当步长为负数时，起始索引所对应的元素必须在终止索引所对应元素的右边" class="headerlink" title="当步长为负数时，起始索引所对应的元素必须在终止索引所对应元素的右边"></a>当步长为负数时，起始索引所对应的元素必须在终止索引所对应元素的右边</h3><p>9、while循环</p>
<h3 id="让程序根据条件重复的执行某条或某些语句"><a href="#让程序根据条件重复的执行某条或某些语句" class="headerlink" title="让程序根据条件重复的执行某条或某些语句"></a>让程序根据条件重复的执行某条或某些语句</h3><h3 id="从终端输入一个数字打印出如下的图形"><a href="#从终端输入一个数字打印出如下的图形" class="headerlink" title="从终端输入一个数字打印出如下的图形"></a>从终端输入一个数字打印出如下的图形</h3><h3 id="如输入：5"><a href="#如输入：5" class="headerlink" title="如输入：5"></a>如输入：5</h3><p>1 2 3 4 5<br>1 2 3 4 5<br>1 2 3 4 5<br>1 2 3 4 5<br>1 2 3 4 5</p>
<h3 id="10、for循环"><a href="#10、for循环" class="headerlink" title="10、for循环"></a>10、for循环</h3><h3 id="遍历可迭代对象中的数据元素"><a href="#遍历可迭代对象中的数据元素" class="headerlink" title="遍历可迭代对象中的数据元素"></a>遍历可迭代对象中的数据元素</h3><h3 id="可迭代对象是指能够依次获取数据元素的对象"><a href="#可迭代对象是指能够依次获取数据元素的对象" class="headerlink" title="可迭代对象是指能够依次获取数据元素的对象"></a>可迭代对象是指能够依次获取数据元素的对象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i=循环变量初始值</span><br><span class="line">while 真值表达式:</span><br><span class="line">   语句块1</span><br><span class="line">else:</span><br><span class="line">  语句块2</span><br><span class="line"> </span><br><span class="line">n=int(input(&quot;请输入一个整数:&quot;))</span><br><span class="line">i=1</span><br><span class="line">while i&lt;=n:</span><br><span class="line">  j = 1</span><br><span class="line">  while j &lt;= n:</span><br><span class="line">    print(j, end=&quot; &quot;)</span><br><span class="line">    j += 1</span><br><span class="line">  print()</span><br><span class="line">  i+=1</span><br><span class="line">for 变量 in 可迭代对象:</span><br><span class="line">  语句块1</span><br><span class="line">else:</span><br><span class="line">  语句块2</span><br></pre></td></tr></table></figure>
<h3 id="11、for循环嵌套"><a href="#11、for循环嵌套" class="headerlink" title="11、for循环嵌套"></a>11、for循环嵌套</h3><h3 id="12、列表-list"><a href="#12、列表-list" class="headerlink" title="12、列表 list"></a>12、列表 list</h3><h3 id="列表可以存储任意类型的数据"><a href="#列表可以存储任意类型的数据" class="headerlink" title="列表可以存储任意类型的数据"></a>列表可以存储任意类型的数据</h3><h3 id="列表是可变序列"><a href="#列表是可变序列" class="headerlink" title="列表是可变序列"></a>列表是可变序列</h3><h3 id="1、表示方式"><a href="#1、表示方式" class="headerlink" title="1、表示方式"></a>1、表示方式</h3><h3 id="2、列表的运算"><a href="#2、列表的运算" class="headerlink" title="2、列表的运算"></a>2、列表的运算</h3><h3 id="-1"><a href="#-1" class="headerlink" title="+"></a>+</h3><h3 id="-2"><a href="#-2" class="headerlink" title="+="></a>+=</h3><h3 id="-3"><a href="#-3" class="headerlink" title="*"></a>*</h3><h3 id="-4"><a href="#-4" class="headerlink" title="*="></a>*=</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s=&quot;ABCDEF&quot;</span><br><span class="line">for i in s:</span><br><span class="line">  print(i)</span><br><span class="line">else:</span><br><span class="line">  print(&quot;for循环因迭代结束而终止！&quot;)</span><br><span class="line">for i in &quot;ABC&quot;:</span><br><span class="line">  for j in &quot;123&quot;:</span><br><span class="line">    print(i+j)</span><br><span class="line">&gt;&gt;&gt; L=[]</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; type(L)</span><br><span class="line">&lt;class &apos;list&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; L=[&quot;abc&quot;,100,200,3.14,[1,2]]</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[&apos;abc&apos;, 100, 200, 3.14, [1, 2]]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; s=&quot;abc&quot;</span><br><span class="line">&gt;&gt;&gt; id(s)</span><br><span class="line">2537354902976</span><br><span class="line">&gt;&gt;&gt; s=s+&quot;123&quot;</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&apos;abc123&apos;</span><br><span class="line">&gt;&gt;&gt; id(s)</span><br></pre></td></tr></table></figure>
<p>3、索引与切片<br>列表的索引与切片规则和字符串的索引切片规则完全相同<br>4、索引与切片赋值<br>切片赋值<br>1、当切片赋值取出的数据为连续的时候，可以赋值给他任意个数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2537384186128</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; s=&quot;abc&quot;</span><br><span class="line">&gt;&gt;&gt; id(s)</span><br><span class="line">2537354902976</span><br><span class="line">&gt;&gt;&gt; s+=&quot;123&quot;</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&apos;abc123&apos;</span><br><span class="line">&gt;&gt;&gt; id(s)</span><br><span class="line">2537384186184</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; L=[1,2,3]</span><br><span class="line">&gt;&gt;&gt; id(L)</span><br><span class="line">2537384176264</span><br><span class="line">&gt;&gt;&gt; L=L+[4,5,6]</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; id(L)</span><br><span class="line">2537384175432</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; L=[1,2,3]</span><br><span class="line">&gt;&gt;&gt; id(L)</span><br><span class="line">2537384176264</span><br><span class="line">&gt;&gt;&gt; L+=[4,5,6]</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; id(L)</span><br><span class="line">2537384176264</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; L=[1,2,3,4,5,6,7]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; L[2]</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; L[2]=&quot;B&quot;</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[1, 2, &apos;B&apos;, 4, 5, 6, 7]</span><br></pre></td></tr></table></figure>
<h3 id="2、当切片赋值的步长不为1时，切片取出的数据个数和赋值的数据个数必须相同"><a href="#2、当切片赋值的步长不为1时，切片取出的数据个数和赋值的数据个数必须相同" class="headerlink" title="2、当切片赋值的步长不为1时，切片取出的数据个数和赋值的数据个数必须相同"></a>2、当切片赋值的步长不为1时，切片取出的数据个数和赋值的数据个数必须相同</h3><p>###3、当切片赋值的起始索引和终止索引相同时，代表在这个索引所对应的元素前面插入数据</p>
<h3 id="13、字典-dict"><a href="#13、字典-dict" class="headerlink" title="13、字典 dict"></a>13、字典 dict</h3><h3 id="字典是可变序列，字典的存储是无序的"><a href="#字典是可变序列，字典的存储是无序的" class="headerlink" title="字典是可变序列，字典的存储是无序的"></a>字典是可变序列，字典的存储是无序的</h3><h3 id="字典的存储方式是由键值对映射存储"><a href="#字典的存储方式是由键值对映射存储" class="headerlink" title="字典的存储方式是由键值对映射存储"></a>字典的存储方式是由键值对映射存储</h3><h3 id="每个键值对之间用逗号分隔，键和值之间用冒号进行连接"><a href="#每个键值对之间用逗号分隔，键和值之间用冒号进行连接" class="headerlink" title="每个键值对之间用逗号分隔，键和值之间用冒号进行连接"></a>每个键值对之间用逗号分隔，键和值之间用冒号进行连接</h3><h3 id="字典的键必须为不可变元素，字典的值可以为任意元素"><a href="#字典的键必须为不可变元素，字典的值可以为任意元素" class="headerlink" title="字典的键必须为不可变元素，字典的值可以为任意元素"></a>字典的键必须为不可变元素，字典的值可以为任意元素</h3><h3 id="字典的键不可重复，是唯一的"><a href="#字典的键不可重复，是唯一的" class="headerlink" title="字典的键不可重复，是唯一的"></a>字典的键不可重复，是唯一的</h3><h3 id="1、表示方式-1"><a href="#1、表示方式-1" class="headerlink" title="1、表示方式"></a>1、表示方式</h3><h3 id="2、字典的基本操作"><a href="#2、字典的基本操作" class="headerlink" title="2、字典的基本操作"></a>2、字典的基本操作</h3><h3 id="1、增加键值对"><a href="#1、增加键值对" class="headerlink" title="1、增加键值对"></a>1、增加键值对</h3><h3 id="增加的键值对的键值不存在原字典中"><a href="#增加的键值对的键值不存在原字典中" class="headerlink" title="增加的键值对的键值不存在原字典中"></a>增加的键值对的键值不存在原字典中</h3><h3 id="2、修改键值对"><a href="#2、修改键值对" class="headerlink" title="2、修改键值对"></a>2、修改键值对</h3><h3 id="增加的键值对的键存在于原字典中"><a href="#增加的键值对的键存在于原字典中" class="headerlink" title="增加的键值对的键存在于原字典中"></a>增加的键值对的键存在于原字典中</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d=&#123;&#125;</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;&#125;</span><br><span class="line">&gt;&gt;&gt; type(d)</span><br><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; d=&#123;&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:20&#125;</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 20&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 20&#125;</span><br><span class="line">&gt;&gt;&gt; d[&quot;sex&quot;]=&quot;男&quot;</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 20, &apos;sex&apos;: &apos;男&apos;&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3、删除键值对"><a href="#3、删除键值对" class="headerlink" title="3、删除键值对"></a>3、删除键值对</h3><p>###3、字典的遍历</p>
<h3 id="字典的任何操作都是有键来进行操作"><a href="#字典的任何操作都是有键来进行操作" class="headerlink" title="字典的任何操作都是有键来进行操作"></a>字典的任何操作都是有键来进行操作</h3><h3 id="14、元组-tuple"><a href="#14、元组-tuple" class="headerlink" title="14、元组 tuple"></a>14、元组 tuple</h3><h3 id="元组是不可变序列"><a href="#元组是不可变序列" class="headerlink" title="元组是不可变序列"></a>元组是不可变序列</h3><p>###元组可以存储任意类型的元素</p>
<h3 id="元组的索引与切片规则和字符串中的规则完全相同"><a href="#元组的索引与切片规则和字符串中的规则完全相同" class="headerlink" title="元组的索引与切片规则和字符串中的规则完全相同"></a>元组的索引与切片规则和字符串中的规则完全相同</h3><h3 id="1、表示方式-2"><a href="#1、表示方式-2" class="headerlink" title="1、表示方式"></a>1、表示方式</h3><h4 id="当元组中只存放一个元素时，需要在这个元素后面加一个逗号，用来区分是单个的数据对象-还是一个元组"><a href="#当元组中只存放一个元素时，需要在这个元素后面加一个逗号，用来区分是单个的数据对象-还是一个元组" class="headerlink" title="当元组中只存放一个元素时，需要在这个元素后面加一个逗号，用来区分是单个的数据对象  还是一个元组"></a>当元组中只存放一个元素时，需要在这个元素后面加一个逗号，用来区分是单个的数据对象  还是一个元组</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 20, &apos;sex&apos;: &apos;男&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; d[&quot;age&quot;]=30</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 30, &apos;sex&apos;: &apos;男&apos;&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 30, &apos;sex&apos;: &apos;男&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; del d[&quot;sex&quot;]</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 30&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">d=&#123;&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:20,&quot;sex&quot;:&quot;男&quot;&#125;</span><br><span class="line">for key in d:</span><br><span class="line">  print(d[key])</span><br></pre></td></tr></table></figure>
<h3 id="15、函数"><a href="#15、函数" class="headerlink" title="15、函数"></a>15、函数</h3><h3 id="有参数有返回值函数"><a href="#有参数有返回值函数" class="headerlink" title="有参数有返回值函数"></a>有参数有返回值函数</h3><h3 id="有参数无返回值函数"><a href="#有参数无返回值函数" class="headerlink" title="有参数无返回值函数"></a>有参数无返回值函数</h3><h3 id="无参数有返回值函数"><a href="#无参数有返回值函数" class="headerlink" title="无参数有返回值函数"></a>无参数有返回值函数</h3><h3 id="无参数无返回值函数"><a href="#无参数无返回值函数" class="headerlink" title="无参数无返回值函数"></a>无参数无返回值函数</h3><p>1、return语句</p>
<h3 id="如果函数想返回一个指定的对象，就需要用到return语句"><a href="#如果函数想返回一个指定的对象，就需要用到return语句" class="headerlink" title="如果函数想返回一个指定的对象，就需要用到return语句"></a>如果函数想返回一个指定的对象，就需要用到return语句</h3><h3 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h3><p>return 对象1，对象2,….</p>
<h3 id="1、如果一个函数中没有return语句相当于在函数末尾加了一行return-None"><a href="#1、如果一个函数中没有return语句相当于在函数末尾加了一行return-None" class="headerlink" title="1、如果一个函数中没有return语句相当于在函数末尾加了一行return None"></a>1、如果一个函数中没有return语句相当于在函数末尾加了一行return None</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t=(100)</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">100</span><br><span class="line">&gt;&gt;&gt; type(t)</span><br><span class="line">&lt;class &apos;int&apos;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; t=(100,)</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">(100,)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; type(t)</span><br><span class="line">&lt;class &apos;tuple&apos;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">def 函数名(参数列表):</span><br><span class="line">  pass</span><br><span class="line">def say_demo():</span><br><span class="line">  print(&quot;hello world!&quot;)</span><br><span class="line">  print(&quot;你好世界！&quot;)</span><br><span class="line">say_demo()</span><br><span class="line">def my_add(a,b): # a,b为函数的形参</span><br><span class="line">  c=a+b</span><br><span class="line">  print(&quot;a+b的值为:&quot;,c)</span><br><span class="line">my_add(10,20) # 10,20为函数的实参</span><br></pre></td></tr></table></figure>
<h3 id="2、如果return语句后面没有返回的指定对象，相当于return-None"><a href="#2、如果return语句后面没有返回的指定对象，相当于return-None" class="headerlink" title="2、如果return语句后面没有返回的指定对象，相当于return None"></a>2、如果return语句后面没有返回的指定对象，相当于return None</h3><h3 id="3、return的作用是结束当前函数的执行，并且返回到调用该函数的地方"><a href="#3、return的作用是结束当前函数的执行，并且返回到调用该函数的地方" class="headerlink" title="3、return的作用是结束当前函数的执行，并且返回到调用该函数的地方"></a>3、return的作用是结束当前函数的执行，并且返回到调用该函数的地方</h3><h3 id="16、面向对象编程"><a href="#16、面向对象编程" class="headerlink" title="16、面向对象编程"></a>16、面向对象编程</h3><h3 id="类-class"><a href="#类-class" class="headerlink" title="类 class"></a>类 class</h3><h3 id="具有相同属性或者行为的对象归为一个集合即为一个类"><a href="#具有相同属性或者行为的对象归为一个集合即为一个类" class="headerlink" title="具有相同属性或者行为的对象归为一个集合即为一个类"></a>具有相同属性或者行为的对象归为一个集合即为一个类</h3><h3 id="类是产生对象-实例-的工厂"><a href="#类是产生对象-实例-的工厂" class="headerlink" title="类是产生对象(实例)的工厂"></a>类是产生对象(实例)的工厂</h3><h3 id="1、类的创建"><a href="#1、类的创建" class="headerlink" title="1、类的创建"></a>1、类的创建</h3><h3 id="2、类的实例化-类的调用"><a href="#2、类的实例化-类的调用" class="headerlink" title="2、类的实例化(类的调用)"></a>2、类的实例化(类的调用)</h3><p>###对象=类名(参数列表)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def my_sum(a,b):</span><br><span class="line">  if a &gt; b:</span><br><span class="line">    return  a</span><br><span class="line">  else:</span><br><span class="line">    return  b</span><br><span class="line">print(my_sum(10,20))</span><br><span class="line">a=100 # a 为全局变量</span><br><span class="line">def my_func(b,c): # b,c为函数的形参 是局部变量</span><br><span class="line">  d=30</span><br><span class="line">  a=200 # 相当于创建了一个和全局变量相同名称的局部变量，在函数内部没有权限更改全局变量</span><br><span class="line">  print(&quot;b=&quot;,b)</span><br><span class="line">  print(&quot;c=&quot;,c)</span><br><span class="line">  print(&quot;a=&quot;,a) #函数内部可以访问全局变量</span><br><span class="line">my_func(10,20)# print(d) #函数外部不可以访问局部变量</span><br><span class="line">print(&quot;函数执行完毕后a=&quot;,a)</span><br></pre></td></tr></table></figure>


<p>class 类名(继承列表):<br>  实例方法<br>  类方法<br>  类变量<br>  静态方法<br>3、实例属性<br>给类产生的对象或者实例添加一个属性<br>对象.实例属性名=属性值<br>car . color=”红色”<br>4、实例方法<br>让类产生的对象可以具备某些行为或者属性<br>实例方法的本质就是定义在类内的函数，每个对象或者实例都可以调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string"> 此类是一个汽车类</span></span><br><span class="line"><span class="string"> """</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line">car=Car()  <span class="comment"># 类的实例化</span></span><br><span class="line">print(id(car))</span><br><span class="line">car1=Car()</span><br><span class="line">print(id(car1))</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string"> 此类是一个汽车类</span></span><br><span class="line"><span class="string"> """</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line">car=Car()  <span class="comment"># 类的实例化</span></span><br><span class="line">car.color=<span class="string">"黑色"</span> <span class="comment">#给对象添加上颜色的属性</span></span><br><span class="line">car1=Car()</span><br><span class="line">car1.color=<span class="string">"红色"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名<span class="params">()</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> 实例方法名<span class="params">(参数列表)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string"> 此类是一个汽车类</span></span><br><span class="line"><span class="string"> """</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_speed</span><span class="params">(self,speed)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">   此实例方法是给对象添加速度的一个方法</span></span><br><span class="line"><span class="string">   """</span></span><br><span class="line">    self.car_speed=speed <span class="comment">#给对象添加上速度的属性</span></span><br><span class="line">    print(self.color,<span class="string">"正在以"</span>,self.car_speed,<span class="string">"的速度行驶！"</span>)</span><br></pre></td></tr></table></figure>

<p> 5、实例方法的调用<br> 实例.实例方法名(参数列表)<br> self代表类的实例，他是实例方法中的第一个参数，一般默认为self<br> 6、类的构造函数(初始化函数)<br> 类的构造函数会在类的实例化过程中自动调用，构造函数中一般会存放一些类产生的对象所<br> 具备的公有属性<br> 构造函数的名称必须为init不可改变</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">car=Car()  # 类的实例化</span><br><span class="line">car.color=&quot;黑色&quot; #给对象添加上颜色的属性</span><br><span class="line">car1=Car()</span><br><span class="line">car1.color=&quot;红色&quot;</span><br><span class="line">class Car(object):</span><br><span class="line">  &quot;&quot;&quot;</span><br><span class="line"> 此类是一个汽车类</span><br><span class="line"> &quot;&quot;&quot;</span><br><span class="line">  def get_speed(self,speed):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">   此实例方法是给对象添加速度的一个方法</span><br><span class="line">   &quot;&quot;&quot;</span><br><span class="line">    self.car_speed=speed #给对象添加上速度的属性</span><br><span class="line">    print(self.color,&quot;的汽车正在以&quot;,self.car_speed,&quot;的速度行驶！&quot;)</span><br><span class="line">car=Car()  # 类的实例化</span><br><span class="line">car.color=&quot;黑色&quot; #给对象添加上颜色的属性</span><br><span class="line">car.get_speed(200) #调用实例方法</span><br><span class="line">car1=Car()</span><br><span class="line">car1.color=&quot;红色&quot;</span><br><span class="line">car1.get_speed(150)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class 类名(继承列表):</span><br><span class="line">  def __init___(self,参数列表):</span><br><span class="line">    pass</span><br><span class="line">class Car(object):</span><br><span class="line">  def __init__(self,color,brand):</span><br><span class="line">    self.color=color</span><br><span class="line">    self.brand=brand</span><br><span class="line">  def get_speed(self,speed):</span><br><span class="line">    self.speed=speed</span><br><span class="line">    print(self.color, &quot;的&quot;, self.brand, &quot;汽车正在以&quot;, self.speed, &quot;的速度行驶！&quot;)</span><br><span class="line">car=Car(&quot;黑色&quot;,&quot;奔驰&quot;)</span><br></pre></td></tr></table></figure>
<h4 id="7、类的继承与派生"><a href="#7、类的继承与派生" class="headerlink" title="7、类的继承与派生"></a>7、类的继承与派生</h4><h4 id="类的继承代表子类可以具备父类所具有的属性和行为"><a href="#类的继承代表子类可以具备父类所具有的属性和行为" class="headerlink" title="类的继承代表子类可以具备父类所具有的属性和行为"></a>类的继承代表子类可以具备父类所具有的属性和行为</h4><h4 id="类的派生是指在子类中添加新的功能"><a href="#类的派生是指在子类中添加新的功能" class="headerlink" title="类的派生是指在子类中添加新的功能"></a>类的派生是指在子类中添加新的功能</h4><h4 id="17、python中的文本文件操作"><a href="#17、python中的文本文件操作" class="headerlink" title="17、python中的文本文件操作"></a>17、python中的文本文件操作</h4><h4 id="操作模式"><a href="#操作模式" class="headerlink" title="操作模式"></a>操作模式</h4><h4 id="r-只读模式"><a href="#r-只读模式" class="headerlink" title="r 只读模式"></a>r 只读模式</h4><h4 id="w-只写模式"><a href="#w-只写模式" class="headerlink" title="w 只写模式"></a>w 只写模式</h4><h4 id="a-追加写入"><a href="#a-追加写入" class="headerlink" title="a 追加写入"></a>a 追加写入</h4><h4 id="rb-二进制读取模式"><a href="#rb-二进制读取模式" class="headerlink" title="rb 二进制读取模式"></a>rb 二进制读取模式</h4><h4 id="wb-二进制写入模式"><a href="#wb-二进制写入模式" class="headerlink" title="wb 二进制写入模式"></a>wb 二进制写入模式</h4><h4 id="1、文件的写入"><a href="#1、文件的写入" class="headerlink" title="1、文件的写入"></a>1、文件的写入</h4><h4 id="f-write"><a href="#f-write" class="headerlink" title="f.write()"></a>f.write()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">car.get_speed(120)</span><br><span class="line">car1=Car(&quot;红色&quot;,&quot;奥迪&quot;)</span><br><span class="line">car1.get_speed(200)</span><br><span class="line">class Father(object):</span><br><span class="line">  def say(self,what):</span><br><span class="line">    print(&quot;正在说:&quot;,what)</span><br><span class="line">  def walk(self,distance):</span><br><span class="line">    print(&quot;行走了&quot;,distance,&quot;米&quot;)</span><br><span class="line">class Son(Father):</span><br><span class="line">  def study(self,subject):</span><br><span class="line">    print(&quot;正在学&quot;,subject)</span><br><span class="line">son=Son() # 子类实例化产生对象</span><br><span class="line">son.say(&quot;你好&quot;)</span><br><span class="line">son.walk(1000)</span><br><span class="line">father=Father()</span><br><span class="line">son.study(&quot;python&quot;)</span><br></pre></td></tr></table></figure>
<h4 id="with-open-文件名-操作模式-encoding-”utf-8”-as-f"><a href="#with-open-文件名-操作模式-encoding-”utf-8”-as-f" class="headerlink" title="with open(文件名,操作模式,encoding=”utf-8”) as f:"></a>with open(文件名,操作模式,encoding=”utf-8”) as f:</h4><h3 id="操作语句"><a href="#操作语句" class="headerlink" title="操作语句"></a>操作语句</h3><h3 id="2、文件的读取"><a href="#2、文件的读取" class="headerlink" title="2、文件的读取"></a>2、文件的读取</h3><h3 id="f-read"><a href="#f-read" class="headerlink" title="f.read()"></a>f.read()</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&quot;data.txt&quot;,&quot;w&quot;,encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">  f.write(&quot;hello 100 200 你好&quot;)</span><br><span class="line">with open(&quot;data.txt&quot;,&quot;r&quot;,encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">  info=f.read()</span><br><span class="line">  print(info)</span><br></pre></td></tr></table></figure>
<h3 id="python-m-pip-install-requests"><a href="#python-m-pip-install-requests" class="headerlink" title="python -m pip install requests"></a>python -m pip install requests</h3><h3 id="python-m-pip-install-lxml"><a href="#python-m-pip-install-lxml" class="headerlink" title="python -m pip install lxml"></a>python -m pip install lxml</h3><h3 id="python-m-pip-install-bs4"><a href="#python-m-pip-install-bs4" class="headerlink" title="python -m pip install bs4"></a>python -m pip install bs4</h3><h3 id="python-m-pip-install-jieba"><a href="#python-m-pip-install-jieba" class="headerlink" title="python -m pip install jieba"></a>python -m pip install jieba</h3><h3 id="python-m-pip-install-wordcloud"><a href="#python-m-pip-install-wordcloud" class="headerlink" title="python -m pip install wordcloud"></a>python -m pip install wordcloud</h3><h3 id="python-m-pip-install-imageio"><a href="#python-m-pip-install-imageio" class="headerlink" title="python -m pip install imageio"></a>python -m pip install imageio</h3><h3 id="python-m-pip-install-matplotlib"><a href="#python-m-pip-install-matplotlib" class="headerlink" title="python -m pip install matplotlib"></a>python -m pip install matplotlib</h3>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Yilia主题配置访问量</title>
    <url>/2019/11/29/Yilia%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%AE%BF%E9%97%AE%E9%87%8F/</url>
    <content><![CDATA[<h2 id="hexo-yilia页脚添加总访问量"><a href="#hexo-yilia页脚添加总访问量" class="headerlink" title="hexo+yilia页脚添加总访问量"></a>hexo+yilia页脚添加总访问量</h2><h5 id="脚本方法使用不蒜子计数"><a href="#脚本方法使用不蒜子计数" class="headerlink" title="脚本方法使用不蒜子计数"></a>脚本方法使用不蒜子计数</h5><p>安装脚本</p>
<p>要使用不蒜子（官网：<a href="http://busuanzi.ibruce.info/）必须在页面中引入busuanzi.js，代码如下：" target="_blank" rel="noopener">http://busuanzi.ibruce.info/）必须在页面中引入busuanzi.js，代码如下：</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">            &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p>在themes/yilia/layout/_partial/footer中添加上述脚本</p>
<p><img src="https://img2018.cnblogs.com/blog/1338341/201810/1338341-20181027102159206-1713161383.png" alt="footer_busuanzi"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔</title>
    <url>/2019/11/29/%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<p>桎梏樊笼，让人感到窒息,天天繁重的功课压迫这着我脆弱疲惫的心。</p>
<p>尽管现在的生活枯燥无聊，尽管说现在每日学习到凌晨。</p>
<p>难免有压力，难免有困惑。但，无病呻吟，也不可取。唯有向上，唯有坚持。</p>
<p>这是我们毕业生的必然选择。老师不是说过吗，“有压力才有动力，既然改变不了什么，那就学着适应它。”</p>
<p>在每日两点一线的生活中，也不乏的向上的奋斗。我想我就像一颗埋在土里的种。</p>
<p>早晚会噗的冲破束缚住我的壳，长成一棵参天的大树。不论多高，天空永远是我的目标。</p>
<p>马云说过：“不吃苦，你要青春干嘛？”是的，我们在正值青春的大好年华里，不吃点苦，不去顽强拼搏，生活有何意义？</p>
<p>我不想在最能吃苦的日子里选择安逸，那么就去拼一拼吧，不就是考试吗，努力一定能考出真实自己！</p>
<p>加油吧！冲破囚牢，突破自己，方能化茧成蝶！</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>心得</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo常用命令笔记</title>
    <url>/2019/11/19/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><pre><code>npm install hexo -g #安装  
npm update hexo -g #升级  
hexo init #初始化</code></pre><h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><pre><code>hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章
hexo p == hexo publish
hexo g == hexo generate#生成
hexo s == hexo server #启动服务预览
hexo d == hexo deploy#部署</code></pre><a id="more"></a>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><pre><code>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。
hexo server -s #静态模式
hexo server -p 5000 #更改端口
hexo server -i 192.168.1.1 #自定义 IP

hexo clean #清除缓存 网页正常情况下可以忽略此条命令
hexo g #生成静态网页
hexo d #开始部署</code></pre><h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><pre><code>hexo generate #使用 Hexo 生成静态文件快速而且简单
hexo generate --watch #监视文件变动</code></pre><h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><pre><code>两个命令的作用是相同的
hexo generate --deploy
hexo deploy --generate</code></pre><p>hexo deploy -g<br>hexo server -g</p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>hexo Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh远程免密登录</title>
    <url>/2019/11/19/ssh%E8%BF%9C%E7%A8%8B%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h2 id="利用ssh-key实现Linux免密访问github"><a href="#利用ssh-key实现Linux免密访问github" class="headerlink" title="利用ssh key实现Linux免密访问github"></a>利用ssh key实现Linux免密访问github</h2><p>使用git bash的windows用户或者linux用户对上传到远端版本库软件（github，gitee等代码托管仓库）时，<br>发现每次git push 或者是 git pull等命令是需要输入自己的账号和密钥时，<br>一次两次还好，每次都做这没啥技术含量的动作，就感觉很繁琐和烦躁，<br>所以，学会使用ssh免密访问必不可少，对我们之后的工作，学习都有好处（这里以linux命令为演示，Windows用git bash一样的处理）</p>
<h3 id="1-生成ssh-key，使用默认保存位置（注意要求输入密码时直接回车，否则每次要输密码）"><a href="#1-生成ssh-key，使用默认保存位置（注意要求输入密码时直接回车，否则每次要输密码）" class="headerlink" title="1 生成ssh key，使用默认保存位置（注意要求输入密码时直接回车，否则每次要输密码）"></a>1 生成ssh key，使用默认保存位置（注意要求输入密码时直接回车，否则每次要输密码）</h3><pre><code>[root@localhost ~]# ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:CvE7bPPDYb1EnQsGsDjs8uqUoiW2XH8g36ycVixmJBw root@localhost.localdomain
The key&apos;s randomart image is:
+---[RSA 2048]----+
|      ..         |
|   E . ..        |
|  . * .  . . .   |
|   + =    + o    |
|  . = o S+ . .   |
|   = B =o o .    |
|o.+.* &amp;o o .     |
|+=o.o+.Bo .      |
|.+o .=o ..       |
+----[SHA256]-----+
[root@localhost ~]#</code></pre><a id="more"></a>
<h3 id="2-将公钥文件-root-ssh-id-rsa-pub上传到github"><a href="#2-将公钥文件-root-ssh-id-rsa-pub上传到github" class="headerlink" title="2 将公钥文件/root/.ssh/id_rsa.pub上传到github"></a>2 将公钥文件/root/.ssh/id_rsa.pub上传到github</h3><p>在个人用户头像选择settings–&gt;&gt;SSH and GPG keys</p>
<p>显示如下</p>
<p><img src="https://img-blog.csdn.net/20180609185051636" alt="ssh" title="ssh"></p>
<p>用命令行输入指令并复制显示出来的数据（或用记事本打开文件，然后拷贝内容到github）</p>
<pre><code>[root@localhost ~]#cd
[root@localhost ~]#cd .ssh/
[root@localhost ~]#cat id_rsa.pub</code></pre><p><img src="https://img-blog.csdn.net/20180609185425339" alt="key" title="key"></p>
<h3 id="3-测试（切换为ssh方式，而不是默认的http方式）"><a href="#3-测试（切换为ssh方式，而不是默认的http方式）" class="headerlink" title="3 测试（切换为ssh方式，而不是默认的http方式）"></a>3 测试（切换为ssh方式，而不是默认的http方式）</h3><p><img src="https://img-blog.csdn.net/20180609190534672" alt="test" title="test"></p>
<pre><code>[root@localhost github]# git remote add origin git@github.com:username/repository.git
//username:你的github或其它远程代码托管仓库的用户名，repository:你的克隆仓库
[root@localhost github]# git push -u origin master</code></pre>]]></content>
      <categories>
        <category>Linux shell</category>
      </categories>
      <tags>
        <tag>Linux SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记</title>
    <url>/2019/11/19/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="vue学习笔记"><a href="#vue学习笔记" class="headerlink" title="vue学习笔记"></a>vue学习笔记</h2><h3 id="开篇语"><a href="#开篇语" class="headerlink" title="开篇语"></a>开篇语</h3><p>建议新手学习,请不要用npm的方式(vue-cli,vue脚手架),太复杂了. 请直接下载vue.js文件本地引入,就上手学习吧<br>参照菜鸟教程网站的vue.js教程<a href="https://www.runoob.com/vue2/vue-start.html" target="_blank" rel="noopener">https://www.runoob.com/vue2/vue-start.html</a><br>从基础开始理解和上手,请看我写的中文注释,帮助理解</p>
<h3 id="一些建议"><a href="#一些建议" class="headerlink" title="一些建议"></a>一些建议</h3><p>直接把菜鸟教程的例子复制到自己的代码编辑器里看更好</p>
<p>菜鸟教程的好处我觉得之一是其有很多实例子,那么就应该拿例子复制回来本地自己的编辑器看.</p>
<p>因为菜鸟的例子左边代码,右边视图.就很小了,不好审视.</p>
<p>要打开浏览器控制台(比如我们推荐用谷歌浏览器chrome在浏览器按f12就可以打开控制台),</p>
<p>直观的看到js和dom层,比看到界面更重要的是看到dom层的实际操作变化</p>
<p><img src="https://segmentfault.com/img/bVbcvzG?w=1598&h=918" alt="vue" title="vue"></p>
<h3 id="一个简单的vue-js例子"><a href="#一个简单的vue-js例子" class="headerlink" title="一个简单的vue.js例子"></a>一个简单的vue.js例子</h3><pre><code>&lt;body&gt;
 &lt;h2&gt;vue&lt;/h2&gt;
  &lt;div id=&quot;myapp&quot;&gt;
   &lt;p title=&quot;哈哈&quot;&gt;学习vue很舒服&lt;/p&gt; 
   &lt;p&gt;{{ message }}&lt;/p&gt; &lt;p&gt;{{ mz }}&lt;/p&gt; 
   &lt;/div&gt; 
   &lt;script src=&quot;js/vue.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; 
   &lt;script type=&quot;text/javascript&quot;&gt; 
   var myapp = new Vue( //新建一个Vue 实例并赋值给变量&apos;myapp&apos;,这时变量myapp就是这个vue实例 
   { 
       el:&apos;#myapp&apos;,
       data:{ message:&apos;hello Vue&apos;,  //myapp.message = &apos;hello Vue&apos; 
       mz:&apos;张三33&apos;  //myapp.mz = &apos;张三33&apos; } } 
   ); 
   &lt;/script&gt; 
   &lt;/body&gt;</code></pre><a id="more"></a>
<h3 id="vue-js一个简单例子的基础说明系列-第1个例子"><a href="#vue-js一个简单例子的基础说明系列-第1个例子" class="headerlink" title="vue.js一个简单例子的基础说明系列-[第1个例子]"></a>vue.js一个简单例子的基础说明系列-[第1个例子]</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;title&gt;vue一个简单例子的基础说明&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div id=&quot;vue_det&quot;&gt;
&lt;!--  {{ }} 用于输出对象属性和函数返回值。  --&gt;
&lt;h3&gt;site : {{site}}&lt;/h3&gt;
&lt;h3&gt;url : {{url}}&lt;/h3&gt;
&lt;h3&gt;alexa : {{alexa}}&lt;/h3&gt;
&lt;h3&gt;{{details()}}&lt;/h3&gt;
&lt;/div&gt;
&lt;script src=&quot;js/vue.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
var vm = new Vue({
el: &apos;#vue_det&apos;,//el 参数，它是 DOM 元素中的 id,这意味着我们在该div里面作业,外面不受影响,不会影响外面
data: {//data 用于定义属性，实例中有三个属性分别为：site、url、alexa。
site: &quot;菜鸟教程&quot;,//这是一个属性site,其值是字符串&quot;菜鸟教程&quot;
url: &quot;www.runoob.com&quot;,//同上
alexa: &quot;10000&quot;//这是一个属性alexa,其值是字符串&quot;10000&quot;
},
methods: {//methods 用于定义的函数，可以通过 return 来返回函数值。
details: function() {
return this.site + &quot; - 学的不仅是技术，更是梦想！&quot;;
}
}
})
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h3 id="vue-js一个简单例子的基础说明系列-第2个例子-—实例属性与方法-它们都有前缀"><a href="#vue-js一个简单例子的基础说明系列-第2个例子-—实例属性与方法-它们都有前缀" class="headerlink" title="vue.js一个简单例子的基础说明系列-[第2个例子]—实例属性与方法,它们都有前缀 $"></a>vue.js一个简单例子的基础说明系列-[第2个例子]—实例属性与方法,它们都有前缀 $</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;vue.js一个简单例子的基础说明系列-[第2个例子]&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div id=&quot;vue_det&quot;&gt;
&lt;h1&gt;site : {{site}}&lt;/h1&gt;
&lt;h1&gt;url : {{url}}&lt;/h1&gt;
&lt;h1&gt;Alexa : {{alexa}}&lt;/h1&gt;
&lt;/div&gt;
&lt;script src=&quot;js/vue.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
// 我们的数据对象
//除了数据属性，Vue 实例还提供了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来。
var data = { site: &quot;菜鸟教程&quot;, url: &quot;www.runoob.com&quot;, alexa: 10000}//定义一个js变量.即js属性
var xm = &apos;小明&apos;;//定义一个js变量.即js属性
var vm = new Vue({
el: &apos;#vue_det&apos;,//定义一个vue属性el,要使用vm.$el才能访问
data: data//定义一个vue属性data,要使用vm.$data才能访问
})
//       我们在浏览器控制台访问上面的那些变量和属性,直接通过.的方式
//        document的子是vm,vm的子是el和data,document.vm能访问vm,而vm.el这样写是
                                    //访问不到vm的,要这样写vm.$el才能访问,因为el是Vue实例的直接子变量
//       data  -&gt;{__ob__: wr}   //是对象
// xm   -&gt;&apos;小明&apos;
// el   -&gt;VM113:1 Uncaught ReferenceError: el is not defined    //这样是访问不了的,因为el不是js的全局变量/属性
// vm.el   -&gt;undefined    //这样也不行,要写成vm.$el才对
//       vm.$el   -&gt;&lt;div id=&quot;vue-det&quot;&gt;...&lt;/div&gt;    //这样才是访问vue的
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>hexoBlog</title>
    <url>/2019/11/14/hexoBlog/</url>
    <content><![CDATA[<h1 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h1><hr>
<h2 id="一、安装-nodejs"><a href="#一、安装-nodejs" class="headerlink" title="一、安装 nodejs"></a>一、安装 nodejs</h2><p>从<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener" title="nodejs">node.js下载页面</a>, 安装一路下一步就ok<br><img src="https://run-zheng.github.io/2018/09/16/use-hexo-gen-blog-deploy-github/install-nodejs.png" alt="nodejs" title="nodejs"></p>
<hr>
<h2 id="二、安装hexo"><a href="#二、安装hexo" class="headerlink" title="二、安装hexo"></a>二、安装hexo</h2><h2 id="安装完nodejs后，-用npm安装hexo"><a href="#安装完nodejs后，-用npm安装hexo" class="headerlink" title="安装完nodejs后， 用npm安装hexo"></a>安装完nodejs后， 用npm安装hexo</h2><pre><code>$ npm install -g hexo-cli 
$ hexo -v</code></pre><hr>
<h2 id><a href="#" class="headerlink" title></a><img src="https://run-zheng.github.io/2018/09/16/use-hexo-gen-blog-deploy-github/install-hexo.png" alt="hexo-v" title="hexo-v"></h2><h2 id="三、使用hexo"><a href="#三、使用hexo" class="headerlink" title="三、使用hexo"></a>三、使用hexo</h2><hr>
<h3 id="1、用hexo初始化并生成blog"><a href="#1、用hexo初始化并生成blog" class="headerlink" title="1、用hexo初始化并生成blog"></a>1、用hexo初始化并生成blog</h3><hr>
<pre><code>$ hexo init my_hexo</code></pre><hr>
<h2 id="-1"><a href="#-1" class="headerlink" title></a><img src="https://run-zheng.github.io/2018/09/16/use-hexo-gen-blog-deploy-github/hexo-init-blog.png" alt="my_hexo" title="my_hexo"></h2><a id="more"></a>
<h3 id="2、安装依赖，然后用hexo-generate，-hexo-g-生成静态页面"><a href="#2、安装依赖，然后用hexo-generate，-hexo-g-生成静态页面" class="headerlink" title="2、安装依赖，然后用hexo generate，(hexo g)生成静态页面"></a>2、安装依赖，然后用hexo generate，(hexo g)生成静态页面</h3><pre><code>$cd my_hexo
$ls -l
$npm install
(这里可能会很慢，所以需要修改一下npm安装源)
$npm config set registry https://registry.npm.taobao.org 
（或者下载cnpm）
$ npm install cnpm -g
$ cnpm install
$ hexo generate //生成静态页面</code></pre><hr>
<h2 id="-2"><a href="#-2" class="headerlink" title></a><img src="https://run-zheng.github.io/2018/09/16/use-hexo-gen-blog-deploy-github/install-hexo-deps.png" alt="hexo-g" title="hexo-g"></h2><h3 id="3、生成静态页面后，可以用hexo-server-或者hexo-s-启动服务器，并通过http-localhost-4000访问"><a href="#3、生成静态页面后，可以用hexo-server-或者hexo-s-启动服务器，并通过http-localhost-4000访问" class="headerlink" title="3、生成静态页面后，可以用hexo server(或者hexo s)启动服务器，并通过http://localhost:4000访问"></a>3、生成静态页面后，可以用hexo server(或者hexo s)启动服务器，并通过<a href="http://localhost:4000访问" target="_blank" rel="noopener">http://localhost:4000访问</a></h3><p><img src="https://run-zheng.github.io/2018/09/16/use-hexo-gen-blog-deploy-github/blog-index.png" alt="hexo-s" title="hexo-s"></p>
<h5 id="至此，hexo博客就部署好了"><a href="#至此，hexo博客就部署好了" class="headerlink" title="至此，hexo博客就部署好了"></a>至此，hexo博客就部署好了</h5><p><em>下一讲，可以换一下hexo默认的主题和如何去写一篇博客</em></p>
<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7</title>
    <url>/2019/11/14/centos7/</url>
    <content><![CDATA[<h1 id="centos7搭建LAMP环境"><a href="#centos7搭建LAMP环境" class="headerlink" title="centos7搭建LAMP环境"></a>centos7搭建LAMP环境</h1><hr>
<h2 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h2><hr>
<h3 id="1-安装apache"><a href="#1-安装apache" class="headerlink" title="1.安装apache"></a>1.安装apache</h3><hr>
<h4 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h4><pre><code>$ sudo cat /etc/redhat-release</code></pre><hr>
<h4 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a>安装apache</h4><pre><code>$ sudo yum -y install httpd httpd-devel</code></pre><hr>
<h4 id="启动apache服务"><a href="#启动apache服务" class="headerlink" title="启动apache服务"></a>启动apache服务</h4><pre><code>$ sudo systemctl httpd start</code></pre><hr>
<h4 id="设置httpd服务开机启动"><a href="#设置httpd服务开机启动" class="headerlink" title="设置httpd服务开机启动"></a>设置httpd服务开机启动</h4><pre><code>$ sudo systemctl enable httpd</code></pre><hr>
<h4 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h4><pre><code>$ sudo systemctl status httpd</code></pre><hr>
<h4 id="防火墙设置开启80端口"><a href="#防火墙设置开启80端口" class="headerlink" title="防火墙设置开启80端口"></a>防火墙设置开启80端口</h4><pre><code>$ sudo firewall-cmd --permanent --zone=public  --add-service=http
$ sudo firewall-cmd --permanent --zone=public  --add-service=https
$ sudo firewall-cmd --reload    </code></pre><hr>
<h4 id="确认80端口监听中"><a href="#确认80端口监听中" class="headerlink" title="确认80端口监听中"></a>确认80端口监听中</h4><pre><code>$ ss -tulp | grep httpd</code></pre><hr>
<h4 id="查服务器IP"><a href="#查服务器IP" class="headerlink" title="查服务器IP"></a>查服务器IP</h4><pre><code>$ ip addr</code></pre><hr>
<a id="more"></a>
<h4 id="浏览器登陆"><a href="#浏览器登陆" class="headerlink" title="浏览器登陆"></a>浏览器登陆</h4><hr>
<p><img src="https://images2015.cnblogs.com/blog/1054216/201707/1054216-20170721173607855-676796079.jpg" alt="img"><br>apache环境搭建成功！</p>
<hr>
<h3 id="2-安装mysql"><a href="#2-安装mysql" class="headerlink" title="2.安装mysql"></a>2.安装mysql</h3><hr>
<h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h4><pre><code>$ sudo yum install mariadb mariadb-server mariadb-libs mariadb-devel
$ sudo rpm -qa | grep mariadb</code></pre><hr>
<h4 id="开启mysql服务，并设置开机启动，检查mysql状态"><a href="#开启mysql服务，并设置开机启动，检查mysql状态" class="headerlink" title="开启mysql服务，并设置开机启动，检查mysql状态"></a>开启mysql服务，并设置开机启动，检查mysql状态</h4><pre><code>$ sudo systemctl start  mariadb
$ sudo systemctl enable  mariadb 
$ ss -tulp |grep mysqld</code></pre><hr>
<h4 id="数据库安全设置"><a href="#数据库安全设置" class="headerlink" title="数据库安全设置"></a>数据库安全设置</h4><pre><code>$ sudo mysql_secure_installation (yynyyy)</code></pre><hr>
<h4 id="登陆数据库测试"><a href="#登陆数据库测试" class="headerlink" title="登陆数据库测试"></a>登陆数据库测试</h4><pre><code>$ mysql -uroot -p(输入设置好的密码)
MariaDB [(none)]&gt; show databases;</code></pre><hr>
<h3 id="3-安装php"><a href="#3-安装php" class="headerlink" title="3.安装php"></a>3.安装php</h3><hr>
<h4 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h4><pre><code>$ sudo yum -y install php
$ sudo rpm -ql php</code></pre><hr>
<h4 id="连接mysql与php"><a href="#连接mysql与php" class="headerlink" title="连接mysql与php"></a>连接mysql与php</h4><pre><code>$ sudo yum -y install php-mysql
$ sudo rpm -ql php-mysql</code></pre><hr>
<h4 id="安装php常用模块"><a href="#安装php常用模块" class="headerlink" title="安装php常用模块"></a>安装php常用模块</h4><pre><code>$ sudo yum install -y php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-snmp php-soap curl curl-devel php-bcmath</code></pre><hr>
<h4 id="测试php"><a href="#测试php" class="headerlink" title="测试php"></a>测试php</h4><pre><code>$ cd /var/www/html
$ ls
$ pwd
$ vi info.php</code></pre><?php
phpinfo();
?>



<h2 id="按esc退出输入，输入’-wq’-保存并退出"><a href="#按esc退出输入，输入’-wq’-保存并退出" class="headerlink" title="(按esc退出输入，输入’:wq’,保存并退出)"></a>(按esc退出输入，输入’:wq’,保存并退出)</h2><h4 id="重启apache服务器"><a href="#重启apache服务器" class="headerlink" title="重启apache服务器"></a>重启apache服务器</h4><pre><code>$ sudo systemctl restart http</code></pre><hr>
<h4 id="测试PHP"><a href="#测试PHP" class="headerlink" title="测试PHP"></a>测试PHP</h4><pre><code>在自己电脑浏览器输入服务器的ip/info.php(如192.168.190.130/info.php)，你可以看到已经安装的模块；</code></pre><p><img src="https://images2015.cnblogs.com/blog/1054216/201707/1054216-20170725104919468-1062733523.jpg" alt="img"></p>
<h5 id="至此，你的centos7的Apache-Mysql-Php环境就搭建好了"><a href="#至此，你的centos7的Apache-Mysql-Php环境就搭建好了" class="headerlink" title="至此，你的centos7的Apache+Mysql+Php环境就搭建好了"></a>至此，你的centos7的Apache+Mysql+Php环境就搭建好了</h5>]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>LAMP</tag>
      </tags>
  </entry>
  <entry>
    <title>makedown案例</title>
    <url>/2019/11/04/makedown%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p><strong>Markdown是一种轻量级的「标记语言」</strong></p>
<p><img src="https://www.mdeditor.com/images/logos/markdown.png" alt="markdown" title="markdown"></p>
<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面，Markdown文件的后缀名便是“.md”</p>
<h2 id="MdEditor是一个在线编辑Markdown文档的编辑器"><a href="#MdEditor是一个在线编辑Markdown文档的编辑器" class="headerlink" title="MdEditor是一个在线编辑Markdown文档的编辑器"></a>MdEditor是一个在线编辑Markdown文档的编辑器</h2><p><em>MdEditor扩展了Markdown的功能（如表格、脚注、内嵌HTML等等），以使让Markdown转换成更多的格式，和更丰富的展示效果，这些功能原初的Markdown尚不具备。</em></p>
<blockquote>
<p>Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如<del>Pandoc</del>，Pandao；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。</p>
</blockquote>
<p>MdEditor源于Pandao的JavaScript开源项目，开源地址<a href="https://github.com/pandao/editor.md" target="_blank" rel="noopener" title="Editor.md">Editor.md</a>，并在MIT开源协议的许可范围内进行了优化，以适应广大用户群体的需求。向优秀的markdown开源编辑器原作者Pandao致敬。</p>
<p><img src="https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png" alt="Pandao editor.md" title="Pandao editor.md"></p>
<a id="more"></a>

<h2 id="MdEditor的功能列表演示"><a href="#MdEditor的功能列表演示" class="headerlink" title="MdEditor的功能列表演示"></a>MdEditor的功能列表演示</h2><h1 id="标题H1"><a href="#标题H1" class="headerlink" title="标题H1"></a>标题H1</h1><h2 id="标题H2"><a href="#标题H2" class="headerlink" title="标题H2"></a>标题H2</h2><h3 id="标题H3"><a href="#标题H3" class="headerlink" title="标题H3"></a>标题H3</h3><h4 id="标题H4"><a href="#标题H4" class="headerlink" title="标题H4"></a>标题H4</h4><h5 id="标题H5"><a href="#标题H5" class="headerlink" title="标题H5"></a>标题H5</h5><h6 id="标题H5-1"><a href="#标题H5-1" class="headerlink" title="标题H5"></a>标题H5</h6><h3 id="字符效果和横线等"><a href="#字符效果和横线等" class="headerlink" title="字符效果和横线等"></a>字符效果和横线等</h3><hr>
<p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s></p>
<p><em>斜体字</em>      <em>斜体字</em></p>
<p><strong>粗体</strong>  <strong>粗体</strong></p>
<p><strong><em>粗斜体</em></strong> <strong><em>粗斜体</em></strong></p>
<p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p>
<p><strong>缩写(同HTML的abbr标签)</strong></p>
<blockquote>
<p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p>
</blockquote>
<p>The <abbr title="Hyper Text Markup Language">HTML</abbr> specification is maintained by the <abbr title="World Wide Web Consortium">W3C</abbr>.</p>
<h3 id="引用-Blockquotes"><a href="#引用-Blockquotes" class="headerlink" title="引用 Blockquotes"></a>引用 Blockquotes</h3><blockquote>
<p>引用文本 Blockquotes</p>
</blockquote>
<p>引用的行内混合 Blockquotes</p>
<blockquote>
<p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href="https://www.mdeditor.com/" target="_blank" rel="noopener">普通链接</a>。</p>
</blockquote>
<h3 id="锚点与链接-Links"><a href="#锚点与链接-Links" class="headerlink" title="锚点与链接 Links"></a>锚点与链接 Links</h3><p><a href="https://www.mdeditor.com/" target="_blank" rel="noopener">普通链接</a><br><a href="https://www.mdeditor.com/" target="_blank" rel="noopener" title="普通链接带标题">普通链接带标题</a><br>直接链接：<a href="https://www.mdeditor.com" target="_blank" rel="noopener">https://www.mdeditor.com</a><br>[锚点链接][anchor-id]<br>[anchor-id]: <a href="https://www.mdeditor.com/" target="_blank" rel="noopener">https://www.mdeditor.com/</a><br><a href="mailto:test.test@gmail.com" target="_blank" rel="noopener">mailto:test.test@gmail.com</a><br>GFM a-tail link @pandao<br>邮箱地址自动链接 <a href="mailto:test.test@gmail.com" target="_blank" rel="noopener">test.test@gmail.com</a>  <a href="mailto:www@vip.qq.com" target="_blank" rel="noopener">www@vip.qq.com</a></p>
<blockquote>
<p>@pandao</p>
</blockquote>
<h3 id="多语言代码高亮-Codes"><a href="#多语言代码高亮-Codes" class="headerlink" title="多语言代码高亮 Codes"></a>多语言代码高亮 Codes</h3><h4 id="行内代码-Inline-code"><a href="#行内代码-Inline-code" class="headerlink" title="行内代码 Inline code"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p>
<h4 id="缩进风格"><a href="#缩进风格" class="headerlink" title="缩进风格"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本 ( Preformatted Text ) 的功能。</p>
<pre><code>&lt;?php
    echo &quot;Hello world!&quot;;
?&gt;</code></pre><p>预格式化文本：</p>
<pre><code>| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |</code></pre><h4 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="HTML-代码-HTML-codes"><a href="#HTML-代码-HTML-codes" class="headerlink" title="HTML 代码 HTML codes"></a>HTML 代码 HTML codes</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mate</span> <span class="attr">charest</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"Editor.md, Markdown, Editor"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">body</span>&#123;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">color</span>:<span class="number">#444</span>;<span class="attribute">font-family</span>: <span class="string">"Microsoft Yahei"</span>, Tahoma, <span class="string">"Hiragino Sans GB"</span>, Arial;<span class="attribute">background</span>:<span class="number">#fff</span>;&#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>: none;&#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">img</span>&#123;<span class="attribute">border</span>:none;<span class="attribute">vertical-align</span>: middle;&#125;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"text-xxl"</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-green"</span>&gt;</span>Plain text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="图片-Images"><a href="#图片-Images" class="headerlink" title="图片 Images"></a>图片 Images</h3><p>图片加链接 (Image + Link)：</p>
<p><a href="https://www.mdeditor.com/images/logos/markdown.png" target="_blank" rel="noopener" title="markdown"><img src="https://www.mdeditor.com/images/logos/markdown.png" alt></a></p>
<blockquote>
<p>Follow your heart.</p>
</blockquote>
<hr>
<h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h3><h4 id="无序列表（减号）Unordered-Lists"><a href="#无序列表（减号）Unordered-Lists" class="headerlink" title="无序列表（减号）Unordered Lists (-)"></a>无序列表（减号）Unordered Lists (-)</h4><ul>
<li>列表一</li>
<li>列表二</li>
<li>列表三</li>
</ul>
<h4 id="无序列表（星号）Unordered-Lists"><a href="#无序列表（星号）Unordered-Lists" class="headerlink" title="无序列表（星号）Unordered Lists (*)"></a>无序列表（星号）Unordered Lists (*)</h4><ul>
<li>列表一</li>
<li>列表二</li>
<li>列表三</li>
</ul>
<h4 id="无序列表（加号和嵌套）Unordered-Lists"><a href="#无序列表（加号和嵌套）Unordered-Lists" class="headerlink" title="无序列表（加号和嵌套）Unordered Lists (+)"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul>
<li>列表一</li>
<li>列表二<ul>
<li>列表二-1</li>
<li>列表二-2</li>
<li>列表二-3</li>
</ul>
</li>
<li>列表三<ul>
<li>列表一</li>
<li>列表二</li>
<li>列表三</li>
</ul>
</li>
</ul>
<h4 id="有序列表-Ordered-Lists"><a href="#有序列表-Ordered-Lists" class="headerlink" title="有序列表 Ordered Lists (-)"></a>有序列表 Ordered Lists (-)</h4><ol>
<li>第一行</li>
<li>第二行</li>
<li>第三行</li>
</ol>
<h4 id="GFM-task-list"><a href="#GFM-task-list" class="headerlink" title="GFM task list"></a>GFM task list</h4><ul>
<li><input checked disabled type="checkbox"> GFM task list 1</li>
<li><input checked disabled type="checkbox"> GFM task list 2</li>
<li><input disabled type="checkbox"> GFM task list 3<ul>
<li><input disabled type="checkbox"> GFM task list 3-1</li>
<li><input disabled type="checkbox"> GFM task list 3-2</li>
<li><input disabled type="checkbox"> GFM task list 3-3</li>
</ul>
</li>
<li><input disabled type="checkbox"> GFM task list 4<ul>
<li><input disabled type="checkbox"> GFM task list 4-1</li>
<li><input disabled type="checkbox"> GFM task list 4-2</li>
</ul>
</li>
</ul>
<hr>
<h3 id="绘制表格-Tables"><a href="#绘制表格-Tables" class="headerlink" title="绘制表格 Tables"></a>绘制表格 Tables</h3><table>
<thead>
<tr>
<th>项目</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody><tr>
<td>计算机</td>
<td align="right">$1600</td>
<td align="center">5</td>
</tr>
<tr>
<td>手机</td>
<td align="right">$12</td>
<td align="center">12</td>
</tr>
<tr>
<td>管线</td>
<td align="right">$1</td>
<td align="center">234</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody><tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody><tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Function name</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>help()</code></td>
<td>Display the help window.</td>
</tr>
<tr>
<td><code>destroy()</code></td>
<td><strong>Destroy your computer!</strong></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">Left-Aligned</th>
<th align="center">Center Aligned</th>
<th align="right">Right Aligned</th>
</tr>
</thead>
<tbody><tr>
<td align="left">col 3 is</td>
<td align="center">some wordy text</td>
<td align="right">$1600</td>
</tr>
<tr>
<td align="left">col 2 is</td>
<td align="center">centered</td>
<td align="right">$12</td>
</tr>
<tr>
<td align="left">zebra stripes</td>
<td align="center">are neat</td>
<td align="right">$1</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Item</th>
<th align="right">Value</th>
</tr>
</thead>
<tbody><tr>
<td>Computer</td>
<td align="right">$1600</td>
</tr>
<tr>
<td>Phone</td>
<td align="right">$12</td>
</tr>
<tr>
<td>Pipe</td>
<td align="right">$1</td>
</tr>
</tbody></table>
<hr>
<h4 id="特殊符号-HTML-Entities-Codes"><a href="#特殊符号-HTML-Entities-Codes" class="headerlink" title="特殊符号 HTML Entities Codes"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;</p>
<p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p>
<p>18&ordm;C  &quot;  &apos;</p>
<p>[========]</p>
<h3 id="Emoji表情-smiley"><a href="#Emoji表情-smiley" class="headerlink" title="Emoji表情 :smiley:"></a>Emoji表情 :smiley:</h3><blockquote>
<p>Blockquotes :star:</p>
</blockquote>
<h4 id="GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x"><a href="#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x" class="headerlink" title="GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul>
<li><input checked disabled type="checkbox"> :smiley: @mentions, :smiley: #refs, <a href>links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li>
<li><input checked disabled type="checkbox"> list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li>
<li><input checked disabled type="checkbox"> [ ] :smiley: this is a complete item :smiley:;</li>
<li><input disabled type="checkbox"> []this is an incomplete item <a href="#">test link</a> :fa-star: @pandao;</li>
<li><input disabled type="checkbox"> [ ]this is an incomplete item :fa-star: :fa-gear:;<ul>
<li><input disabled type="checkbox"> :smiley: this is an incomplete item <a href="#">test link</a> :fa-star: :fa-gear:;</li>
<li><input disabled type="checkbox"> :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href="#">test link</a>;</li>
</ul>
</li>
</ul>
<h4 id="反斜杠-Escape"><a href="#反斜杠-Escape" class="headerlink" title="反斜杠 Escape"></a>反斜杠 Escape</h4><p>*literal asterisks*</p>
<p>[========]</p>
<h3 id="科学公式-TeX-KaTeX"><a href="#科学公式-TeX-KaTeX" class="headerlink" title="科学公式 TeX(KaTeX)"></a>科学公式 TeX(KaTeX)</h3><p>$$E=mc^2$$</p>
<p>行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。</p>
<p>$$x &gt; y$$</p>
<p>$$(\sqrt{3x-1}+(1+x)^2)$$</p>
<p>$$\sin(\alpha)^{\theta}=\sum_{i=0}^{n}(x^i + \cos(f))$$</p>
<p>多行公式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\displaystyle</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n a\_k b\_k \right)^2</span><br><span class="line">\leq</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n a\_k^2 \right)</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n b\_k^2 \right)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\displaystyle</span><br><span class="line">    \frac&#123;1&#125;&#123;</span><br><span class="line">        \Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;</span><br><span class="line">        \frac25 \pi&#125;&#125; = 1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;</span><br><span class="line">        1+\frac&#123;e^&#123;-6\pi&#125;&#125;</span><br><span class="line">        &#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125;</span><br><span class="line">         &#123;1+\cdots&#125; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f(x) = \int_&#123;-\infty&#125;^\infty</span><br><span class="line">    \hat f(\xi)\,e^&#123;2 \pi i \xi x&#125;</span><br><span class="line">    \,d\xi</span><br></pre></td></tr></table></figure>
<h3 id="分页符-Page-break"><a href="#分页符-Page-break" class="headerlink" title="分页符 Page break"></a>分页符 Page break</h3><blockquote>
<p>Print Test: Ctrl + P</p>
</blockquote>
<p>[========]</p>
<h3 id="绘制流程图-Flowchart"><a href="#绘制流程图-Flowchart" class="headerlink" title="绘制流程图 Flowchart"></a>绘制流程图 Flowchart</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 用户登陆</span><br><span class="line">op=&gt;operation: 登陆操作</span><br><span class="line">cond=&gt;condition: 登陆成功 Yes or No?</span><br><span class="line">e=&gt;end: 进入后台</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>
<p>[========]</p>
<h3 id="绘制序列图-Sequence-Diagram"><a href="#绘制序列图-Sequence-Diagram" class="headerlink" title="绘制序列图 Sequence Diagram"></a>绘制序列图 Sequence Diagram</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Andrew-&gt;China: Says Hello</span><br><span class="line">Note right of China: China thinks\nabout it</span><br><span class="line">China--&gt;Andrew: How are you?</span><br><span class="line">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></table></figure>
<h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>My first Blog article</title>
    <url>/2019/11/04/My-first-Blog-article/</url>
    <content><![CDATA[<h2 id="My-first-Blog-Acticle"><a href="#My-first-Blog-Acticle" class="headerlink" title="My first Blog Acticle"></a>My first Blog Acticle</h2><h3 id="前端的第一篇博客—-致自己"><a href="#前端的第一篇博客—-致自己" class="headerlink" title="前端的第一篇博客—-致自己"></a>前端的第一篇博客—-致自己</h3><pre><code>前端开发菜鸟，一直处于心神游离的状态，
对于测试抛过来的bug从未达到过“神来杀神，佛来杀佛”的感觉，
总结起来就是一个问题，自己技术不过关，重复出现的问题没能做及时总结和归档，
所以决定从写前端博客开始，
一来方便自己查阅和加深印象，
二来也贡献于遇到同样问题的同胞，
三来也是得到自我监督和公众监督的一种方式，
希望能在前端这条路上越走越远</code></pre><a id="more"></a>
<h3 id="Best-wishes-to-yourself"><a href="#Best-wishes-to-yourself" class="headerlink" title="Best wishes to yourself!"></a>Best wishes to yourself!</h3>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
